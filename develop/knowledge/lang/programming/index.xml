<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>プログラミング言語 on yossy4411のノート</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/</link><description>Recent content in プログラミング言語 on yossy4411のノート</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>yossy4411 (おかゆ)</copyright><lastBuildDate>Mon, 19 May 2025 19:40:21 +0900</lastBuildDate><atom:link href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>AOTコンパイル</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/ahead-of-time-compile/</link><pubDate>Mon, 19 May 2025 19:40:21 +0900</pubDate><guid>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/ahead-of-time-compile/</guid><description>&lt;p>&lt;strong>AOTコンパイル&lt;/strong> (英: AOT Compile) は、プログラムのコードやILをコンパイル時に機械語へ変換するコンパイルの方法のこと。対義語はJITコンパイルである。&lt;/p>
&lt;p>AOTは、&lt;strong>Ahead-Of-Time&lt;/strong>の頭文字をとったものであり、事前コンパイルとも呼ばれる。&lt;/p>
&lt;h2 id="概要">概要
&lt;/h2>&lt;p>JITコンパイルでは、アプリケーションの実行直前または実行中に、ILを実行環境に合わせた機械語にコンパイルするため、インタプリタ言語よりは高速ではあるが、ILからの実行時コンパイルが挟まるため最初に低速になることが多い。これは、ゲームなどではほとんど問題になることはないが、頻繁に実行と停止が繰り返す、コマンドラインツールなどで問題になりやすい。&lt;/p>
&lt;p>それに対比して、AOTコンパイルは、比較的性能の高い、開発環境やビルド環境で行われるように、JITコンパイルよりもコンパイルに時間を割くことができる。また、コンパイラに渡すオプションによって最適化レベルを開発者が操作しやすい。&lt;/p>
&lt;p>しかしながら、AOTコンパイルしたアプリケーションが常にJITコンパイルしたコードよりも高速であるとは限らない。なぜなら、AOTコンパイルは特定のOSなどで共通した命令セットを用いて行われるからだ。一方でJITコンパイル先は実行環境に対してネイティブであるため、AOTよりも根強くコードが実行できる可能性がある。&lt;br>
例を出すと、&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/about/" >Rust&lt;/a>のターゲットアーキテクチャは、Linuxの64ビットCPUに対して&lt;code>x86_64-unknown-linux-gnu&lt;/code>を使用できる。しかし、Linuxでx86_64の中でもDebian系、Arch系、RedHat系などといった種類もあるため、そこに合わせてコンパイルできるというのがJITの１つの魅力だといる。&lt;/p>
&lt;h2 id="netのaotサポート">.NETのAOTサポート
&lt;/h2>&lt;p>もともとC#をはじめとした.NETでは、JITコンパイル形式が基本だった。だが、.NET Frameworkでは、アセンブリからネイティブコードを生成できるツール「Ngen.exe」がサポートされていた。しかし、これは主に起動と終了を繰り返す、サーバー向けのものであり、また手軽に利用できるようなものではなかった。&lt;/p>
&lt;p>そこで、.NET Core 3ではAOTコンパイルの１つとしてReadyToRunがサポートされた。また、.NET 7からはネイティブAOTがサポートされるようになったが、互換性のあるライブラリはまだ限定されている。&lt;/p>
&lt;h2 id="言語">言語
&lt;/h2>&lt;p>AOTコンパイルが主に使用される主要な言語は以下。&lt;/p>
&lt;ul>
&lt;li>C/C++&lt;/li>
&lt;li>&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/about/" >Rust&lt;/a>&lt;/li>
&lt;li>Go&lt;/li>
&lt;li>D言語&lt;/li>
&lt;li>Zig&lt;/li>
&lt;li>Nim&lt;/li>
&lt;li>Haskell&lt;/li>
&lt;li>Fortran&lt;/li>
&lt;/ul>
&lt;p>一部でAOTコンパイルをサポートする主要な言語は以下。&lt;/p>
&lt;ul>
&lt;li>Java&lt;/li>
&lt;li>.NET C#&lt;/li>
&lt;li>Python&lt;/li>
&lt;/ul></description></item><item><title>プログラミングパラダイム</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/paradime/</link><pubDate>Fri, 16 May 2025 13:22:28 +0900</pubDate><guid>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/paradime/</guid><description>&lt;p>&lt;strong>プログラミングパラダイム&lt;/strong>とは、プログラミングにおける考え方のスタイルのことである。&lt;/p>
&lt;h2 id="概要">概要
&lt;/h2>&lt;p>プログラミングパラダイムは、プログラマーにとってどのようにプログラミングを行うべきかという見方を与えるものである。&lt;/p>
&lt;p>プログラミングパラダイムでは、推奨されていることや禁じられていることがある程度決まっているが、厳密に定義している書類やウェブサイトは&lt;strong>存在しない&lt;/strong>。そのため、ある意味暗黙的なルールとなっている部分がある。&lt;/p>
&lt;p>それぞれの言語ではプログラミングパラダイムが顕著に表れる部分がある。また、複数のプログラミングパラダイムを使用している言語（マルチパラダイムプログラミング言語）も存在する。&lt;/p>
&lt;h2 id="プログラミングパラダイムの種類">プログラミングパラダイムの種類
&lt;/h2>&lt;h3 id="オブジェクト指向">オブジェクト指向
&lt;/h3>&lt;p>「オブジェクト」でプログラムを構築する考え方。&lt;br>
データの構造と手続きを1つにまとめたものをオブジェクトとして扱う（らしい）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyObject&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span> MyFunction() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#75715e">// これが手続き（関数）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#75715e">// これがオブジェクト（クラス）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>主なオブジェクト指向プログラミング言語&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Objective-C&lt;/li>
&lt;li>C++&lt;/li>
&lt;li>C#&lt;/li>
&lt;li>Java&lt;/li>
&lt;li>Python&lt;/li>
&lt;/ul>
&lt;p>詳しくは&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/object-orient/about/" >オブジェクト指向プログラミング&lt;/a>を参照。&lt;/p>
&lt;h3 id="手続き型">手続き型
&lt;/h3>&lt;p>一連の手続きや関数でプログラムを構築する考え方。&lt;br>
コードは上から下へ順番に実行される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 関数の定義
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, world!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 変数の宣言と初期化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> sum &lt;span style="color:#f92672">=&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 関数の呼び出し
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sum: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, sum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 条件分岐
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (sum &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sum is greater than 5&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sum is 5 or less&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ループ
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;i: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>主な手続き型プログラミング言語&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>C&lt;/li>
&lt;li>Pascal&lt;/li>
&lt;li>BASIC&lt;/li>
&lt;li>Python&lt;/li>
&lt;/ul>
&lt;p>詳しくは&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/procedural/about/" >手続き型プログラミング&lt;/a>を参照。&lt;/p>
&lt;h2 id="関数型">関数型
&lt;/h2>&lt;p>データを変えず、関数の組み合わせだけでプログラムを構築する考え方。&lt;br>
&lt;a class="link" href="#%e6%89%8b%e7%b6%9a%e3%81%8d%e5%9e%8b" >手続き型&lt;/a>との大きな違いは、変数が不変（イミュータブル）だという点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">addOne&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">addOne&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>)); &lt;span style="color:#75715e">// 4（xは変わらない）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>主な関数型プログラミング言語&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Haskell&lt;/li>
&lt;li>Elixir&lt;/li>
&lt;li>JavaScript&lt;/li>
&lt;li>&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/about/" >Rust&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>詳しくは&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/functional/about/" >関数型プログラミング&lt;/a>を参照。&lt;/p></description></item></channel></rss>