<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on yossy4411のノート</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/</link><description>Recent content in Rust on yossy4411のノート</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>yossy4411 (おかゆ)</copyright><lastBuildDate>Tue, 08 Apr 2025 15:29:13 +0900</lastBuildDate><atom:link href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>クレート</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/crate/</link><pubDate>Tue, 08 Apr 2025 15:29:13 +0900</pubDate><guid>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/crate/</guid><description>&lt;h2 id="クレートとは">クレートとは
&lt;/h2>&lt;p>クレート (Crate)は、&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/about/" >Rust&lt;/a>のコードをまとめる基本単位の1つ。Rustのプロジェクトやライブラリのことを指す。&lt;/p>
&lt;p>コンパイル先の違いによって&lt;a class="link" href="#%e3%83%90%e3%82%a4%e3%83%8a%e3%83%aa%e3%82%af%e3%83%ac%e3%83%bc%e3%83%88" >バイナリクレート&lt;/a>と&lt;a class="link" href="#%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%82%af%e3%83%ac%e3%83%bc%e3%83%88" >ライブラリクレート&lt;/a>に分けられる。&lt;/p>
&lt;h2 id="バイナリクレート">バイナリクレート
&lt;/h2>&lt;p>CLIアプリケーションやGUIアプリケーションなどを含む、実行可能なプログラムを提供するクレートは一般的に『バイナリクレート』と呼ばれる。&lt;/p>
&lt;p>コンパイル時にバイナリとしてビルドされ、バイナリファイルを実行したときに関数&lt;code>main&lt;/code>が呼び出されるようになっている。&lt;/p>
&lt;p>デフォルトでは&lt;code>src/main.rs&lt;/code>がバイナリクレートの定義になる。&lt;br>
また、&lt;code>src/bin/*.rs&lt;/code>がすべてバイナリとして認識される。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-rust:" data-lang="rust:">fn main() {
println!(&amp;#34;Hello, World!&amp;#34;);
}
&lt;/code>&lt;/pre>&lt;p>実行すると、CLIで&lt;code>Hello, World!&lt;/code>が出力される。&lt;/p>
&lt;p>また、都度&lt;code>Cargo.toml&lt;/code>を編集して別のバイナリクレートを同じプロジェクト内に作ることもできる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">package&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;mypackage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">edition&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;2024&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#a6e22e">bin&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;run-all&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">path&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;src/run.rs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ライブラリクレート">ライブラリクレート
&lt;/h3>&lt;p>&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/libs/about/" >ライブラリ&lt;/a>を提供するクレートは、『ライブラリクレート』と呼ばれる。&lt;/p>
&lt;p>一般的にいくつもの構造体やトレイト、関数などを定義する。&lt;/p>
&lt;p>デフォルトで&lt;code>src/lib.rs&lt;/code>がライブラリクレートの中心となる。ここでモジュールなどを定義する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">mod&lt;/span> client;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">mod&lt;/span> server;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">MyStruct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">str&lt;/span> name,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> MyStruct {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">str&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>モジュールごとに&lt;code>mod.rs&lt;/code>を定義して、その中に更にモジュールを定義したりすることもできる。&lt;/p></description></item><item><title>Rustのコンパイラについて</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/compiler/</link><pubDate>Fri, 04 Apr 2025 16:04:15 +0000</pubDate><guid>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/compiler/</guid><description>&lt;h3 id="概要">概要
&lt;/h3>&lt;p>&lt;code>rustc&lt;/code>&lt;/p>
&lt;ul>
&lt;li>AOTコンパイル&lt;/li>
&lt;li>クロスコンパイルが可能 (Windows, Mac, Linux, iOS, Android, WASM)&lt;/li>
&lt;li>実行時に発生する可能性のあるエラーをチェックしてくれます&lt;/li>
&lt;/ul>
&lt;p>実行時のエラーを最大限まで減らすため、コンパイルには比較的時間がかかります。&lt;/p>
&lt;div class="admonition important">
&lt;div class="admonition-title">Important&lt;/div>
&lt;div class="admonition-content">
Rustのコンパイラ、疲労困憊ラ
&lt;/div>
&lt;/div></description></item><item><title>Rustの概要</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/about/</link><pubDate>Fri, 04 Apr 2025 16:46:51 +0900</pubDate><guid>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/about/</guid><description>&lt;p>&lt;strong>Rust&lt;/strong>は、性能やメモリ安全性を目指して作られた、マルチパラダイムのシステムプログラミング言語である。C系の言語を置き換えることを目標としているが、ポインターなどの概念が存在せず安全に開発を行うことができる。&lt;/p>
&lt;p>読み方は&lt;strong>ラスト&lt;/strong>。&lt;/p>
&lt;h2 id="概要">概要
&lt;/h2>&lt;p>Rustには&lt;strong>ポインターが存在しない&lt;/strong>。その代わり、借用といって、参照を取るシステムによって値を共有することができる。また、値の本体を、変数やメンバーへの代入、関数での引数としての使用を行うときは、その値は移動する。これを譲渡という。&lt;br>
このシステムによって、&lt;span class="dead-link">
ガベージコレクション
&lt;span style="font-size: 1rem">（リンク先が非公開です）&lt;/span>
&lt;/span>を必要としない安全なメモリ管理ができるのである。&lt;/p>
&lt;p>Rustでは、ほとんどのエラーを&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/Knowledge/lang/programming/Rust/rustc" >コンパイラ&lt;/a>がキャッチできるように設計されている。そのため、ランタイムエラーは従来の言語よりも少ない。Javaで最も多いとされるNullPointerExceptionのような、Rustでいう参照によって発生するエラーはコンパイルエラーとして扱われる。&lt;/p>
&lt;p>Rustは、並列・並行処理、非同期処理を標準でサポートする。参照システムは安全に並行処理を行うことができるように設計されている。&lt;/p>
&lt;h2 id="コード">コード
&lt;/h2>&lt;p>HelloWorldは以下の通り。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そう、とても単純なのである。これはRustの単純な構文と、マクロのおかげである。&lt;/p>
&lt;h2 id="用語集">用語集
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/" >crate&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/ownership/" >所有権&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/compiler/" >rustc&lt;/a> - Rust compiler&lt;/li>
&lt;li>&lt;span class="dead-link">
デリファレンス
&lt;span style="font-size: 1rem">（リンク先が非公開です）&lt;/span>
&lt;/span>&lt;/li>
&lt;/ul></description></item><item><title>所有権システム</title><link>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/ownership/</link><pubDate>Fri, 04 Apr 2025 16:25:59 +0900</pubDate><guid>https://yossy4411.okayugroup.net/develop/knowledge/lang/programming/rust/ownership/</guid><description>&lt;h3 id="所有権">所有権
&lt;/h3>&lt;p>Rustには&amp;quot;所有権システム&amp;quot;というのがあります。
これには、ゼロコストのメモリ管理ができるという利点があります。&lt;/p>
&lt;p>これによりGCが不必要となり、速度が圧倒的に上がります。&lt;/p>
&lt;p>関数やマクロなどで値を使用したとき、その値の所有権は関数へ移動します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> a: String &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>.to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> custom_function(a); &lt;span style="color:#75715e">// aの所有権はcustom_functionに渡る
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ここより下ではもうaは使用できない
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;移動後の値の使用: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, a); &lt;span style="color:#75715e">// コンパイルエラー
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">custom_function&lt;/span>(text: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;関数内での値: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ここより下ではもうtextは使用できない
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>また、main関数内の変数&lt;code>a&lt;/code>は&lt;code>fn main&lt;/code>→&lt;code>custom_function&lt;/code>→&lt;code>println!&lt;/code>のように移動しています。
println!関数に渡ったあと、その関数内でスコープを抜けるときに変数はメモリ上から破棄されます。&lt;/p>
&lt;blockquote>
&lt;p>つまり、custom_function関数でaを使ったあとにはもう値は存在しないこととなります。&lt;/p>&lt;/blockquote>&lt;/blockquote></description></item></channel></rss>