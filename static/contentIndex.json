{"Excalidraw/Drawing-2025-04-19-18.55.31.excalidraw":{"slug":"Excalidraw/Drawing-2025-04-19-18.55.31.excalidraw","filePath":"Excalidraw/Drawing 2025-04-19 18.55.31.excalidraw.md","title":"Drawing 2025-04-19 18.55.31.excalidraw","links":[],"tags":["excalidraw"],"content":"⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠ You can decompress Drawing data with the command palette: ‘Decompress current Excalidraw file’. For more info check in plugin settings under ‘Saving’\nExcalidraw Data\nText Elements\n歴史の分野についての画像の提示\nここに色々描いています \n打製石器 \n磨製石器 \n縄文土器 "},"README":{"slug":"README","filePath":"README.md","title":"README","links":[],"tags":[],"content":"知識の倉庫\n俺の思ったこと全部置いてる場所\n\n\n                  \n                  NOTE\n                  \n                \n\n\n情報の宝箱やー\n\n\n\n\n\n                  \n                  CAUTION\n                  \n                \n\n\n流石にプライバシーとか次の動画のネタとかは載せてません。\nあくまで役立つ情報のまとめとか、頭の中の整理のために使っています。\n\n\n\nHugo統合\n基本的に、Hugo（静的サイトビルダー）として利用できるような形にしたいと思っています。\nしたがって、Markdownファイルそれぞれには次のようなテンプレートが貼られています。\n---\ntitle: タイトル\ndescription: 説明\nlead: 記事の冒頭 (meta description)\ntags: タグ1, タグ2\naliases: エイリアス（リダイレクション）\ndate: YYYY-MM-DD HH:mm:ss 作成日時\nlastmod: YYYY-MM-DD HH:mm:ss 更新日時\ndraft: true/false ドラフトかどうか\nshowContent: true/false _index.mdで内容まで表示するか\n---\n \n## 内容\n..."},"index":{"slug":"index","filePath":"_index.md","title":"_index","links":["OGSP","開発","develop/Knowledge/知識置き場","日記","学校","推し活","ライセンス"],"tags":[],"content":"yossy4411のノート\n日常とか頭の整理とかに使ってるノートをWebで見れるようにしました。\n何かしらの役に立てれば幸いです。\n目次\n\nOGSP\n開発 - 開発に関すること\n\n知識置き場 - 知識の整理\n\n\n日記 - 日々の出来事まとめ\n学校 - 学校の勉強内容など\n推し活 - 推しを語りたい\n\nGitHub Repo\nこのノートはGitHubとObsidianによって、こちらにて公開されています。\nまた、このウェブサイト自体はHugoによって静的に管理されており、ソースコードはGitHubに公開されています。\n毎日朝6時と夜18時に自動でビルドされており、最新の情報が反映されています。\nライセンス\nノートの内容はCC0ライセンスで公開されており、自由に利用できます。ただし、画像や商標権はその著作者に帰属しますので、注意してください。\n\n\n                  \n                  WARNING\n                  \n                \n\n\nなお、知識置き場では、Wikipediaのコンテンツを使用しているためCC BY-SA 4.0ライセンスをかけています。ご注意ください。\n\n\n\n詳しくはライセンスをご覧ください。\nお問い合わせ\n何か質問や要望があれば、TwitterまでDM、もしくは記事のコメントをご利用ください。"},"develop/Knowledge/AI/AI":{"slug":"develop/Knowledge/AI/AI","filePath":"develop/Knowledge/AI/AI.md","title":"AI","links":["develop/Knowledge/AI/GitHub-Copilot","develop/Knowledge/AI/AIにコード書かせてる奴ら、それでいいの？"],"tags":[],"content":"概要\n人工知能 (Artifical Intelligence ⇒ AI) は、コンピューターを用いて知能を知能を研究する科学の分野のことを指す語。\nまたは、言語の理解や推論、問題解決などの知的行動を人間の代わりにコンピューターに行わせる技術を指す。1\n最近のAIの技術の成長速度は非常に速く、4日ごとにトレンドが入れ替わると言って良い程（私見）です。\nコーディング\nGitHub CopilotやCursorを使うことで、AIによってコーディングを自動化できる。\n便利な反面、これには良くない点もあるかと思う。\n↪ AIにコード書かせてる奴ら、それでいいの？\nFootnotes\n\n\n人工知能 - Wikipedia ↩\n\n\n"},"develop/Knowledge/AI/GitHub-Copilot":{"slug":"develop/Knowledge/AI/GitHub-Copilot","filePath":"develop/Knowledge/AI/GitHub Copilot.md","title":"GitHub Copilot","links":["AI"],"tags":[],"content":"概要\nGitHub CopilotはMicrosoftが開発した、コーディングに特化したAI。\nGPTなどの大規模LLMと、GitHubに存在する星の数ほどのコードを基にした学習データセットを組み合わせて作成されている。\n特に、IDEと組み合わせて使われることが多い。\n使い方\nGitHub Copilotを契約し、VSCodeやJetbrains IDEなどのIDEでプラグインをインストールすることで使用できる。\nなお、VSCodeユーザーは無料で使うことができる。\nまた、大学生以下はGitHub Education Packで無償で使える。"},"develop/Knowledge/AI/index":{"slug":"develop/Knowledge/AI/index","filePath":"develop/Knowledge/AI/_index.md","title":"AI","links":[],"tags":[],"content":""},"develop/Knowledge/index":{"slug":"develop/Knowledge/index","filePath":"develop/Knowledge/_index.md","title":"Knowledge","links":[],"tags":[],"content":"\n\n                  \n                  IMPORTANT\n                  \n                \n\n\nこれを作成する私はあくまでも「中学生」で、プログラミングを専門的にやっている訳ではありません。\n多少の間違いがあるかと思いますので、もし見つけた場合はコメントをお願いします。\n\n\n"},"develop/Knowledge/internet/URI":{"slug":"develop/Knowledge/internet/URI","filePath":"develop/Knowledge/internet/URI.md","title":"URI","links":["develop/Knowledge/internet/URL","develop/Knowledge/internet/application/http/HTTP"],"tags":[],"content":"Uniform Resource Identifier （ユニフォーム リソース アイデンティファイア、統一資源識別子）、URIとは、抽象的または物理的なリソースを識別するためのコンパクトな文字列のことである。また、一定の書式によってリソースを指し示す識別子（Identifier）である。\n形式\nexample.com\nこれはURIの中では特にURLであるが、これは以下のような要素で構成されている。\nscheme://[userinfo@]host[:port]/path[?query][#fragment]\nURIのスキームは、一般的にはHTTP (http://, https://) が使用されるが、他にもFTP (ftp://)やメール (mailto:)、ローカルファイル (file://)などがある。"},"develop/Knowledge/internet/URL":{"slug":"develop/Knowledge/internet/URL","filePath":"develop/Knowledge/internet/URL.md","title":"URL","links":["develop/Knowledge/internet/web/World-Wide-Web","develop/Knowledge/internet/URI"],"tags":[],"content":"Uniform Resource Locator (ユニフォーム リソース ロケータ、統一資源位置指定子）、URLとは、インターネット上のリソースの場所を特定するための、形式的な記号の並び。\nWorld Wide Webをはじめとした、インターネットアプリケーションに置いて提供されるリソースを、主にその所在を表記することで特定する。\nURLは、URIの一種である。"},"develop/Knowledge/internet/index":{"slug":"develop/Knowledge/internet/index","filePath":"develop/Knowledge/internet/_index.md","title":"インターネット","links":[],"tags":[],"content":"ノートの内容について\nこの記事の多くはWikipediaを参考に作成しています。また、Wikipediaの表現をそのまま流用している部分もあります。\nしかし、Wikipediaのライセンス上では、文章はCC BY-SA 4.0で公開されているため、コピーすることで著作権違反などには問われません。\nただし、クレジットがないのは違反なので、ここで明確にライセンスを決定します。\n出典: Wikipedia\nCC BY-SA 4.0に基づいて再配布。"},"develop/Knowledge/internet/application/index":{"slug":"develop/Knowledge/internet/application/index","filePath":"develop/Knowledge/internet/application/_index.md","title":"アプリケーション層","links":[],"tags":[],"content":""},"develop/Knowledge/internet/application/http/HTTP":{"slug":"develop/Knowledge/internet/application/http/HTTP","filePath":"develop/Knowledge/internet/application/http/HTTP.md","title":"HTTP","links":["develop/Knowledge/internet/インターネット","develop/Knowledge/internet/transport/tcp/TCP","develop/Knowledge/internet/transport/quic/QUIC","develop/Knowledge/internet/transport/トランスポート層","develop/Knowledge/internet/web/World-Wide-Web","develop/Knowledge/internet/application/http/HTTP1.1","develop/Knowledge/internet/application/http/Keep-Alive","develop/Knowledge/internet/application/http/HTTP2","develop/Knowledge/internet/application/http/HTTP3"],"tags":[],"content":"HTTP (Hypertext Transfer Protocol)は、インターネット上でアプリケーション間コネクション上を行う、リクエスト／レスポンス型・ステートレス・メッセージ指向通信プロトコルである。\n概要\nTCPやQUIC (HTTP/3で関連)は、アプリケーション間のコネクション型通信を提供する(これをトランスポート層という)。HTTPは、このコネクション場を、リソースの要求と返答が、メッセージ単位で、１往復のクライアントリクエストとサーバーレスポンスという形で通信される。\n…と定められている。\nHTTPの発明によって、インターネットのリソースの公開とアクセスが容易になった。\nクライアントとサーバー間で接続が確立した後にメッセージを送るだけでデータが返ってくるため、これが実現される。\nHTTPの発明目的であり、今でも使用されている場面がWorld Wide Webである。WebサーバーとWebブラウザは通常HTTPで通信し、返ってきたデータからページを組み立ててブラウザが表示している。\n歴史\nイギリスの物理学者ティム・バーナーズ＝リーは1990年末、ロバート・カイリューと共に初のWebブラウザとWebサーバを作成した。ブラウザには通信をするためのプロトコルが必要だったので、二人はHTTPの最初期のバージョン(HTTP/0.x) を設計した。\n以来インターネットの大部分をHTTP通信が占めるようになり、1998年にはインターネット上の通信の75%がHTTPによるものになった。\n最初期のHTTP/0.9の仕様書はもともと、紙1枚で済むような非常に簡素なものだったのだが、2度のバージョンアップを経た後のHTTP/1.1（現在でも使用される）の仕様書は実に176ページ近くの分量に膨れあがった。\nHTTP/0.9\n1991年に最初にドキュメント化されたバージョン。メソッドはGETしかなかった。レスポンスは単純にドキュメントの内容で、サーバー側はレスポンスを返してコネクションを切断するだけだ。\nこれだけ単純だから１枚で済むわけだ。\nGET /index.html\nHTTP/1.0\n1996年5月に発表された。仕様が RFC で扱われるようになった。メソッドに POST など、 GET 以外のものが増えた。\n\nレスポンスにヘッダーがつくようになった。\nヘッダーにHTTPステータスコードを含めるようになった。\nHTTP/0.9 との区別のため、リクエストプロトコルにバージョンを含めることになった。\n\nGET /index.html HTTP/1.0\nHTTP/1.1\n1.1\n現代で使われるHTTPプロトコルバージョンの1つである。\n1997年1月に初版が発表された。その後3回改訂され、現在はセマンティクス・キャッシングを除く部分が RFC 9112 で規定されている。\n\nHostヘッダーフィールドの規定が追加された。\nTLSがサポートされた。\nKeep-Aliveがデフォルト化され、通信が高速化された。\n\nGET /index.html HTTP/1.1\nHost: foo.example.com\nHTTP/2\n2\nHTTP/2の目標はHTTP/1.1のトランザクション・セマンティクスとの完全な後方互換性を維持したまま非同期な接続の多重化、ヘッダ圧縮、リクエストとレスポンスのパイプライン化を実現することである。\n\nテキストベースからバイナリベースへ変化した。\nストリームを使ったデータ送受信の実現\nサーバープッシュ型に対応した。\nヘッダの圧縮が可能になった。\n\nHTTP/3\n3\nHTTP/3ではTCPからQUICというプロトコルに変化した。QUICはUDPソケットの上で通信を行うため、安全性はもともと低かった。その信頼性はQUICが担保しており、TLSにも対応している。\n\nTCPからQUICへプロトコルを変更。\nハンドシェイクの高速化\n通信がすべてTLS 1.3によって暗号化される。\n"},"develop/Knowledge/internet/application/http/HTTP1.1":{"slug":"develop/Knowledge/internet/application/http/HTTP1.1","filePath":"develop/Knowledge/internet/application/http/HTTP1.1.md","title":"HTTP/1.1","links":["develop/Knowledge/internet/application/http/HTTP","develop/Knowledge/internet/application/http/Keep-Alive","develop/Knowledge/internet/application/http/HTTP2","develop/Knowledge/internet/application/http/HTTP3"],"tags":[],"content":"HTTP/1.1は、一般的に使用されるHTTPのバージョンの１つである。\nこのバージョンでは、1.0の制限の多くを解決し、効率化と機能性を向上した。\n特徴\n1.0からは、以下の変更があった。\n持続接続\nHTTP/1.0ではリクエストごとにTCP接続を初期化してトランスミッション後にはそれを切断していたが、1.1ではKeep-Aliveがデフォルトで有効になった。\nこれにより、同じ接続で複数のリクエストを送信できるため、オーバーヘッドの削減と高速化が可能である。\nパイプライン処理\n持続接続のおかげで、一つのTCP接続で複数のリクエストを同時に送信可能となる。\nただし、レスポンス順序は固定されるため、後続が前の処理を待つ、Head-of-Line Blockingが発生しやすい。\nHOSTの必須化\nバーチャルホスト（一つのIPに複数のサイト）に対応できるようになった。\nHOST: okayugroup.com\n\nこれは、HOSTヘッダによってサーバー側でリクエスト先の判別が可能になったからである。\n\nHostヘッダーフィールドの規定の追加\nTLSサポート\nKeep-Aliveのデフォルト化\n\nキャッシュ制御\nCache-Control, ETag, If-Modified-Since など、HTTPキャッシュを制御するための細かいヘッダが導入された。\nこれによって、データの節約とレスポンスの高速化ができた。\nメソッド\n\nGET\nPOST\nHEAD\nPUT1\nDELETE1\nOPTIONS\nTRACE\nCONNECT\n\n歴史\n\nRFC 2068として1997年に初登場\nRFC 2616（1999年）で改訂\nRFC 7230～7235で2014年に仕様が再整理\n\n現代でも一部古いウェブサイトで使用されている。Windows10のcurlではデフォルトでHTTP/1.1が使用されていたりする。\n現在の標準は2であり既に古くなっているものだが、仕組みが単純なために組み込みアプリケーションでも使われることもある。\n課題点\nHTTP/1.1は多くの改善をもたらしたが、時代が進むにつれて以下のような課題も浮き彫りに：\n\nHead-of-Line Blockingにより、同時通信の効率が低下。\n多数のTCP接続が必要なため、接続数の制限・ラウンドトリップ遅延が問題に。\nバイナリではなくテキストベースのため、パースに時間がかかる。\n\nこれらの課題を解決するために、2や3が後継として登場した。\nFootnotes\n\n\nHTTP/1.0で存在していたが、HTTP/1.1で正式に実装されたもの。 ↩ ↩2\n\n\n"},"develop/Knowledge/internet/application/http/HTTP2":{"slug":"develop/Knowledge/internet/application/http/HTTP2","filePath":"develop/Knowledge/internet/application/http/HTTP2.md","title":"HTTP/2","links":["develop/Knowledge/internet/application/http/HTTP1.1","develop/Knowledge/internet/application/http/HTTP","develop/Knowledge/internet/application/http/HTTP3"],"tags":[],"content":"HTTP/2 は、1.1の課題を解決するために開発された次世代のプロトコルであり、2015年に RFC 7540 により標準化された。Googleが開発した SPDY プロトコルをベースにしており、パフォーマンスと効率に特化している。\n特徴\nバイナリプロトコル\n1.xまではテキストベースだったものが、HTTP/2では完全にバイナリ形式になった。これにより、パース処理が高速になり、エラーも減る。\nマルチプレクシング\n1つのTCP接続中に複数のリクエスト・レスポンスを並列に処理可能となった。\nすなわち、これで順番待ちがなくなり、Head-of-Line Blocking問題を軽減することができる。\nストリーム制御\n各リクエストは「ストリーム」という単位で管理。\nストリームには優先順位やフローの制御が可能である。\nサーバープッシュ\nクライアントがリクエストする前に、サーバーが必要になりそうなリソースを先に送信できる（例：ウェブページが含むCSSやJS）。\nヘッダ圧縮（HPACK）\n冗長なヘッダ情報を効率良く圧縮することで、通信量を削減できる。\n課題\n\nTCPベースのため、パケットロス時にそれを待つために全ストリームが止まる。これがまだ残ってるHOL問題。これは、3で解消されることとなる。\nサーバープッシュは扱いが難しく、現状あまり普及していない。\n"},"develop/Knowledge/internet/application/http/HTTP3":{"slug":"develop/Knowledge/internet/application/http/HTTP3","filePath":"develop/Knowledge/internet/application/http/HTTP3.md","title":"HTTP/3","links":["develop/Knowledge/internet/application/http/HTTP2","develop/Knowledge/internet/application/http/HTTP","develop/Knowledge/internet/transport/quic/QUIC","develop/Knowledge/internet/transport/トランスポート層","develop/Knowledge/internet/transport/tcp/TCP","develop/Knowledge/internet/transport/udp/UDP","develop/Knowledge/internet/TCP-IP","develop/Knowledge/internet/application/http/0-RTT接続","develop/Knowledge/internet/application/http/HTTP1.1"],"tags":[],"content":"HTTP/3 は、HTTP2に続くHTTPの3つ目のメジャーバージョンであり、最新版である。2022年に RFC 9114 によって正式化された。\n概要\nHTTP/3は、RFCドラフト「HTTP over QUIC」をベースとしている。QUICはGoogleによってはじめに開発された、トランスポート層のプロトコルである。\nもっとも、通信プロトコルの基盤がTCPからUDPベースのQUICに変化したことが最大の変化である。\n特徴\nQUICプロトコルベース\nHTTP/3は、IP接続から進化して、UDP上に築かれたQUICという新しいプロトコルを使用する。これにより、0-RTT接続が可能である。\nまた、QUICの機能を活かし、再接続なしで接続の再開ができる。\n真・並列通信\nTCPの越えられなかった制限を超え、パケットロスがあっても他ストリームには影響しないというUDPの特性を活かす。これによって、Head-of-Line Blockingが完全に解消できる。\nTLSの内蔵\nQUICでは暗号化(TLS 1.3)が標準化されていて、通信は常にセキュアである。ハンドシェイクと暗号化処理が一体化しており、高速かつ安全に通信を行うことができる設計。\n課題\n\nUDPをブロックする設計のネットワークではそもそも使用できない。\n実装が複雑なため、マイナーな言語やツールでは非対応の部分がある。\n\n比較\n(ChatGPTによる生成)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n項目HTTP1.12HTTP/3通信方式TCPTCPUDP（+QUIC）マルチプレクシング×（順番に処理）◯（1接続で並列）◎（独立して並列）HOL問題×（がっつり）△（少しあり）◎（完全解消）暗号化任意（TLS対応）任意（TLS推奨）強制（TLS 1.3内蔵）ヘッダ圧縮×◯（HPACK）◯（QPACK）サーバープッシュ×◯（あり）△（非推奨傾向）"},"develop/Knowledge/internet/application/http/Keep-Alive":{"slug":"develop/Knowledge/internet/application/http/Keep-Alive","filePath":"develop/Knowledge/internet/application/http/Keep-Alive.md","title":"Keep-Alive接続について","links":["develop/Knowledge/internet/application/http/HTTP","develop/Knowledge/internet/transport/tcp/TCP"],"tags":[],"content":"Keep-Alive、またはKeep-Alive接続とは、HTTPにおいて、TCP接続を切断させずに持続的に接続を行うことである。\nHTTPの仕組みとして、データを転送するときには、ハンドシェイクを行って接続を確立し、そのあとにリクエスト本体を送信する。Keep-Aliveは、その確立された接続を、接続したままにする仕組みである。\nKeep-Aliveを使用しない場合、リクエストを送信する度にハンドシェイクなどの処理を行う必要があり、時間がかかる。Keep-Aliveの登場は、主に無駄な時間を減らすことが目的である。"},"develop/Knowledge/internet/application/http/index":{"slug":"develop/Knowledge/internet/application/http/index","filePath":"develop/Knowledge/internet/application/http/_index.md","title":"HTTP","links":[],"tags":[],"content":""},"develop/Knowledge/internet/application/アプリケーション層":{"slug":"develop/Knowledge/internet/application/アプリケーション層","filePath":"develop/Knowledge/internet/application/アプリケーション層.md","title":"アプリケーション層","links":["IP","develop/Knowledge/internet/TCP-IP"],"tags":["MOC"],"content":"アプリケーション層（英: Application Layer）とは、通信ネットワークにおいてホストが用いる共用のプロトコル（IP）とメソッドを示す抽象化レイヤーである。\nIPモデルにおいては、アプリケーション層は4階層のうちの第4層にあたり、IPのコンピューターネットワークを介したプロセス間通信に使われる通信プロトコルとインターフェースメソッドを含む。\nアプリケーションが標準化するのは通信のみで、クライアントサーバーモデルまたはP2Pのネットワーキング・モデルにおけるデータ交換の管理などはそれより下のトランスポート層が行う。"},"develop/Knowledge/internet/protocol/IP":{"slug":"develop/Knowledge/internet/protocol/IP","filePath":"develop/Knowledge/internet/protocol/IP.md","title":"インターネット・プロトコル","links":["develop/Knowledge/internet/TCP-IP","develop/Knowledge/internet/application/アプリケーション層","develop/Knowledge/internet/application/http/HTTP","develop/Knowledge/internet/transport/tcp/TCP","develop/Knowledge/internet/transport/udp/UDP"],"tags":[],"content":"インターネット・プロトコルは、パケット交換型ネットワークにおいてホスト間のパケット転送とルーティングを担う基本プロトコルで、IPv4とIPv6が主に利用される。\n概要\nインターネット・プロトコル（Internet Protocol、略称: IP）は、OSI参照モデルにおけるネットワーク層の通信プロトコルであり、パケット交換型ネットワークにおいて送信元ホストから宛先ホストへのパケットのルーティングと転送を担う。インターネットアーキテクチャの中核を成し、IPv4およびIPv6の2つの主要バージョンが広く利用されている。\n歴史\nインターネット・プロトコルは、1970年代にアメリカ国防総省が開発したARPANETに端を発し、その標準化は1981年にRFC791（IPv4）として発行された。その後、アドレス枯渇問題や拡張性向上の要請から、1998年にRFC2460（IPv6）が策定された。\n機能と設計\nIPはコネクションレス型のプロトコルであり、信頼性確保や順序制御は提供しない。上位層プロトコル（例: TCP）がエラー検出・再送制御を担う一方で、IPは次の機能を実装する:\n\nアドレッシング: 送信元・宛先IPアドレスの指定\nフラグメンテーション: パケット長がネットワークMTUを超える場合の分割と再構築\nルーティング: 経路選択と中継ノードへの転送\n\nバージョン\nIPv4\n\nアドレス長: 32ビット（約42億個のアドレス空間）\nヘッダ長: 可変（20～60バイト）\n主な課題: アドレス枯渇、セキュリティ機能の限定\n\nIPv6\n\nアドレス長: 128ビット（膨大なアドレス空間）\nヘッダ長: 固定（40バイト）\n特徴: 拡張ヘッダによる機能拡張、内蔵されたIPsecサポート、簡素化されたヘッダ構造\n\nパケット構造\nIPパケットは、共通ヘッダ部分とペイロード部分から構成される。主なヘッダフィールドには以下が含まれる:\n\nバージョン\nヘッダ長\nサービスタイプ（Type of Service）\n全長\n識別子、フラグ、フラグメンテーションオフセット\nTTL（Time To Live）\nプロトコル識別子\nヘッダチェックサム\n送信元・宛先IPアドレス\n\n実装\n多くのオペレーティングシステムやネットワーク機器には、IPスタックとしてIPv4およびIPv6の実装が組み込まれている。代表的な実装には、BSD系のネットワークスタック、Linuxカーネルのネットワークサブシステム、商用ルータOSなどがある。\n関連項目\nインターネット群\nアプリケーション層\n\nHTTP\nSSH\nDNS\nSSL\nFTP\nSFTP\nVNC\nRDP\n\nトランスポート層\n\nTCP\nUDP\n\nインターネット層\n\nIP\n\nネットワークインターフェース層\n\nWi-Fi\nEthernet\nBluetooth\nLTE\n4G\n5G\nLoRa\n"},"develop/Knowledge/internet/protocol/index":{"slug":"develop/Knowledge/internet/protocol/index","filePath":"develop/Knowledge/internet/protocol/_index.md","title":"IP","links":[],"tags":[],"content":""},"develop/Knowledge/internet/transport/index":{"slug":"develop/Knowledge/internet/transport/index","filePath":"develop/Knowledge/internet/transport/_index.md","title":"トランスポート層","links":[],"tags":[],"content":""},"develop/Knowledge/internet/transport/quic/QUIC":{"slug":"develop/Knowledge/internet/transport/quic/QUIC","filePath":"develop/Knowledge/internet/transport/quic/QUIC.md","title":"QUIC","links":["develop/Knowledge/internet/transport/トランスポート層","develop/Knowledge/internet/transport/udp/UDP","develop/Knowledge/internet/application/http/HTTP3","application/http/HTTP"],"tags":[],"content":"QUIC (クイック) は、次世代型のトランスポート層の通信プロトコルである。\n概要\nQUICは、UDPを基礎にGoogleのJIM Roskindによって設計された、TLSを用いたセキュリティやUDPに由来する高速性などの面で優れている通信プロトコルである。\nQUICは、エンドポイント間の多重化接続の集合体に対応しており、レイテンシ削減や接続の一時的な切断にも柔軟に対応できる。これらの理由から、3にも採用されている。\n特徴\nセキュリティが高い\nQUICの接続は、すべてTLS1.3で暗号化されており、この規則を破ることはどんな場合においても不可能である。また、接続時にはTLSハンドシェイクを行い、高効率で信頼性の高い通信ができるよう設計されている。\nUDPベース\nTCPのようなコネクション型であるが、UDPがベースとなっている。\nUDPの上に再送処理や順序制御などで、信頼性を築き上げている。\nコネクションの再利用と再開が可能\nモバイル回線やWi-Fiの切り替えなどでIPアドレスが変わっても、QUICはコネクションを保持できる。これは、コネクションをIPアドレスで判別するのではなくコネクションIDを割り当てて判別しているからである。\nストリームの多重化\nQUICでは、一つの接続に対して複数のストリームを持つことができる。これによりHTTP/2のヘッドオブラインブロッキング問題（HoL）を解決できる。\n利用状況\nGoogle, YouTube, Gmail, Facebook, Cloudflare, LINEなどの多数のサービスで、HTTP/3を含めたQUICプロトコルが採用されている。\n2020年には、IETF (Internet Engineering Task Force)により正式な標準仕様として承認された。\nなお、3はQUICの上で動作する。このHTTP/3は現状、多数のサーバーで採用されている。\nTCPと比較\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n項目TCP + TLSQUICベースTCPUDP暗号化別（TLS）組み込み（TLS 1.3）接続確立複数ラウンド1-RTT or 0-RTTストリーム全体が止まる（HoLあり）独立（HoLなし）接続遮断への対応再接続が必要コネクション維持可能\nセキュリティと拡張性\n暗号化された状態で通信されるため、中継装置（ミドルボックス）による最適化が難しい。だがその分、プロトコルの進化が高速にできるというメリットもある。"},"develop/Knowledge/internet/transport/quic/index":{"slug":"develop/Knowledge/internet/transport/quic/index","filePath":"develop/Knowledge/internet/transport/quic/_index.md","title":"QUIC","links":[],"tags":[],"content":""},"develop/Knowledge/internet/transport/tcp/TCP":{"slug":"develop/Knowledge/internet/transport/tcp/TCP","filePath":"develop/Knowledge/internet/transport/tcp/TCP.md","title":"TCP","links":["IP","develop/Knowledge/internet/web/World-Wide-Web","develop/Knowledge/internet/application/アプリケーション層","develop/Knowledge/internet/application/http/Keep-Alive","develop/Knowledge/internet/transport/udp/UDP","udp/UDP","develop/Knowledge/internet/transport/quic/QUIC"],"tags":[],"content":"Transmission Control Protocol（トランスミッション コントロール プロトコル、TCP）はIPネットワーク上のアプリ間・コネクション型・高信頼性・ストリーム指向の通信プロトコルである。\n概要\nTCPは通信プロトコルである。\nTCPではポート、ソケット、コネクションの概念が導入され、IPネットワークのホスト上にあるアプリケーション同士がコネクションを通じて通信する。\n確立されたコネクションは、TCPが定める制御機構によって到着が保証され、破壊（エラー）が検出され、流量や輻輳が制御されており、これを通信路としてバイトストリームが伝達される。\nTCPを用いることで、インターネットにおける到達保証付きアプリケーション間メッセージ通信が可能になる。このため、ファイル転送や電子メール、World Wide Web、リモートデバイス管理などの様々なインターネットアプリケーションで使用される。\n特徴\nコネクションの確立（3-way ハンドシェイク）\n通信前にクライアントとサーバー間で接続を確立する。これにより、信頼できる通信チャネルが形成される。\n接続を確立してからデータを転送するが、確立された接続はそのまま残すことができる(Keep-Alive) ので、たくさんのデータを送信するためにも使われる。\n信頼性の保証\n各パケットにシーケンス番号を持たせて順序を管理し、ACK（確認応答） で受信の確認を行う。届いていないパケットは自動的に再送される（再送処理）。\n順序制御\nパケットがバラバラに届いた場合でも、受信側で正しい順序に並べ替える。\nフロー制御\n相手の処理能力に応じて送信量を調整し、バッファオーバーフローを防ぐ。\nバッファオーバーフローというのは、受け取り側でデータがバッファに入り切らずに必要なデータが捨てられることで、これはパケットロスにつながる。\n輻輳制御\nネットワークの混雑状況を検知し、パケットの送信速度を調整することで、通信品質を保つ。\n利用例\nTCPは、以下のようなアプリケーションに適している：\n\nWeb通信（HTTP, HTTPS）\nメール（SMTP, POP3, IMAP）\nファイル転送（FTP）\nリモート接続（SSH, Telnet）\n\nこのようなケースは、パケットロスは許されないが通信が遅くてもやりきれるものである。\n逆にパケットロスは許されるが速度が必要なケースにはUDPが用いられることが多い。\nUDPとの比較\nTCPとの比較のとおりである。\n補足\nTCPは信頼性重視のプロトコルであるため、リアルタイム性が重視されるアプリ（ボイスチャットやゲームなど）では適さないこともある。そのような用途にはUDPや、UDPベースで信頼性も考慮したQUICなどが用いられる。"},"develop/Knowledge/internet/transport/tcp/index":{"slug":"develop/Knowledge/internet/transport/tcp/index","filePath":"develop/Knowledge/internet/transport/tcp/_index.md","title":"TCP","links":[],"tags":[],"content":""},"develop/Knowledge/internet/transport/udp/UDP":{"slug":"develop/Knowledge/internet/transport/udp/UDP","filePath":"develop/Knowledge/internet/transport/udp/UDP.md","title":"UDP","links":["IP","develop/Knowledge/internet/transport/tcp/TCP","develop/Knowledge/internet/transport/quic/QUIC"],"tags":[],"content":"User Datagram Protocol（ユーザ データグラム プロトコル、UDP）はIPネットワーク上のアプリケーション間データグラム送信を実現する通信プロトコルである。\n概要\nUDPは、TCPと同じく、アプリケーション間のデータ送信を担当する。しかし、TCPとは異なり、UDPは以下のような信頼性を保証する機能を持たない。\n\nパケットの到達保証\nパケット順序の維持\n再送制御\n\nつまり、パケットが入れ替わったり届かない可能性がないということである。\nその代わり、UDPは処理コストが小さく、速度が速いという特性があるため、リアルタイム性が重要な通信に適している。\n用途\nUDPは以下のような用途で使用されている。\n\nDNS\nVoIP\nオンラインゲーム\n動画配信・ストリーミング\nネットワークブロードキャスト\nNTP\n\nこれらのアプリケーションでは、パケット損失よりもレイテンシの低さが重要されるため、UDPが適しているのだ。\nヘッダ構造\nUDPのヘッダは非常にシンプルで、わずか8バイトで構成される。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nフィールドサイズ (bit)送信元ポート番号16宛先ポート番号16データ長16チェックサム16\nTCPとの比較\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n特徴UDPTCPコネクションなしあり信頼性低い（欠落の可能性あり）高い（到達・順序保証）軽量性高い（高速）低め（ヘッダが大きい）通信順序の保証なしあり速度高速やや遅い\nTCPは郵便配達、UDPは伝書鳩のように考えてもらえればよい。\nデメリット\n先程から何度か言っているように、UDPは安全性が保証されない。\nパケットロス時の再送処理がない\nパケットというのは、情報通信における転送データのかたまりのことである。\nIPでは、大きなデータがある場合、それは一度に処理されず、いくつかのパケットに分割され転送される。\nパケットロスというのは、このパケットが転送の途中で失われることであり、これが発生した場合にはデータの一部が欠落することになる。そうすると、例えば画像の一部が崩壊したりゲームのプレイヤーが意図しない動きをすることになる。\nこれを防ぐため、TCPやQUICには一定時間後に正常にデータが宛先に送信されたことを検証して、必要に応じて不足したパケットを送り直す処理（再送処理）が存在するのだが、この処理はUDPには存在しない。\nパケットの順番が入れ替わる\nUDPでは送信側のパケットの順番が保証されない。というのも、TCPなどのプロトコルでは、転送されたパケットは送信元から送信された順番で宛先に到達するが、UDPではこれが入れ替わることがある。\n同じルートを同じ速度で走ればその順番のまま届くと考えるかもしれないが、ネットワークのルートは変化しがちなのでそう上手くはいかない。\nパケットの順番が入れ替わるタイミングというのは、レールのポイントが切り替わったときや渋滞に引っかかったときをイメージしてもらえばわかりやすい。\n対処法\nこれらのデメリットを解消するために生まれたプロトコルがQUICであり、ここでは再送処理やパケットの順番の保証が実装されている。その他、TLS1.3で暗号化されていたり、様々な工夫が加えられている。\nただしそこまでの重装備が必要ない場合は、パケットロスを受け入れるか、独自で再送処理を実装するなどの工夫を行うことを推奨する。"},"develop/Knowledge/internet/transport/udp/index":{"slug":"develop/Knowledge/internet/transport/udp/index","filePath":"develop/Knowledge/internet/transport/udp/_index.md","title":"UDP","links":[],"tags":[],"content":""},"develop/Knowledge/internet/transport/トランスポート層":{"slug":"develop/Knowledge/internet/transport/トランスポート層","filePath":"develop/Knowledge/internet/transport/トランスポート層.md","title":"トランスポート層","links":["develop/Knowledge/internet/application/アプリケーション層","develop/Knowledge/internet/transport/tcp/TCP","develop/Knowledge/internet/transport/udp/UDP","develop/Knowledge/internet/transport/quic/QUIC"],"tags":["MOC"],"content":"トランスポート層（英: Transport Layer）とは、通信ネットワークにおいて上位のアプリケーション層からのサービス要求に応じ、また下位のインターネット層に対してサービス要求を行う。\nTCP/IPモデルにおいては、トランスポート層は4階層のうちの第3層のことで、トランスポート層はホストコンピュータ上の適切なアプリケーションプロセスにデータを配送する責任がある。ｋろえは、異なったアプリケーションプロセスからのデータのパケット化や、要求の送信元と要求先のポート番号の追加なども行う。\n主なプロトコル\n\nTCP\nUDP\nQUIC\n"},"develop/Knowledge/internet/transport/何故TCPとQUICは相互通信ができるのか":{"slug":"develop/Knowledge/internet/transport/何故TCPとQUICは相互通信ができるのか","filePath":"develop/Knowledge/internet/transport/何故TCPとQUICは相互通信ができるのか.md","title":"どうしてTCPとQUICは相互通信ができるのか？","links":["develop/Knowledge/internet/transport/udp/UDP","develop/Knowledge/internet/transport/tcp/TCP","develop/Knowledge/internet/transport/quic/QUIC","develop/Knowledge/internet/application/http/Keep-Alive","develop/Knowledge/internet/application/http/HTTP3","develop/Knowledge/internet/application/http/HTTP","protocol/IP","udp/UDP","develop/Knowledge/internet/protocol/IPアドレス"],"tags":[],"content":"動機\nUDPを学んでいくと、何故TCPが相互的に通信ができるのか気になってきませんか？\nましてやQUICに至っては、UDPの上に作られたプロトコルのくせにKeep-Aliveが使えるってもう訳わかんなくなってくるんです。\nTCPの双方向通信\nTCPで双方向通信が実現できる理由は、NATの仕組みを理解すればすぐ分かるはずです。\nTCPがコネクションを確立すると、NATは、LANとWANのIPアドレス:ポートの変換テーブルを作成します。この変換テーブルは、コネクションが切断される（通信が生きていると判定されなくなる）まで残ります。\nコネクションが切れると、通信が切れたと判断されて変換テーブルはすぐに削除されます。\nちなみに変換テーブルがコネクションが存在する間に置き換わってしまうと、別の場所にパケットが届くようになってしまいますｗｗ\nUDPだと…\nUDPは、その性質上コネクションを確立しません（これをデータグラム方式という、UDP = User Datagram Protocol）。\nそのため、まずまず双方向通信するように設計されていないのです。\nまた、このときのNATの変換テーブルはどのタイミングで削除されるかというと…\nしばらく通信がなかったとき\nです。\nつまり、リクエストに対してレスポンスを返すまでに時間がかかりすぎると、別の宛先にパケットが届いたり、到達できなかったりします。\nしかもUDPの仕組み上、パケットが正しく届いたかどうかを知ることもできません。\nそれを解決するのがQUICなのだ！\nこれを踏まえると、QUICでは3としてKeep-Aliveが使える理由がはっきりしてきます。\nその理由はズバリ！\n\n\n                  \n                  IMPORTANT\n                  \n                \n\n\nGoogleが実装したから！\n\n\n\nえ、内容うっすって？\nでもこんな簡単なことが私は理解できていなかったのです。面白いですね。\n\nパケットが正しく届いたかどうかを確認する\nHeartbeatを送信して接続を維持する\nNATの標準ポートで通信できる\n\nそういうのが、QUICです。UDPのダメな点を直してくれています。\nHTTPの標準に合うようにUDPの上に作ったプロトコルがQUICですので、接続を確立することができます。接続を確立したあと、TCPの場合はコネクションが切れたかどうかでNATはテーブルの破棄を行いますが、QUICの場合は定期的にping用のパケットを送ることで、接続を維持します。\nこれでUDPでもNATが壊れないんですね！🤯\nUDP単体でも双方向通信は一応できる\nIPのパケット構造とUDPのヘッダ構造的に見て、リクエスト元のIPアドレスとポートは分かるので、サーバーがそこに対してUDPでデータを投げれば済む話ではある。\nクライアント側に関しては、NATのテーブルが残る限り、LANからWANへの送信パケットはもちろん、WANからLANへの受信パケットも転送できる。そのため、UDPサーバーを送信と同じポートで待機すれば済む。\nちなみに送信に何のポートを使うのかはこういう感じで作れるらしい。\nsock.bind((&quot;0.0.0.0&quot;, 12345))\nよく分からんね"},"develop/Knowledge/internet/web/1/Web1.0":{"slug":"develop/Knowledge/internet/web/1/Web1.0","filePath":"develop/Knowledge/internet/web/1/Web1.0.md","title":"Web1.0","links":["develop/Knowledge/internet/web/2/Web2.0","develop/Knowledge/internet/web/World-Wide-Web"],"tags":[],"content":"Web 1.0は、現代のWeb2やWeb3よりも前の時代のWebを示す語である。\n正式な読み方はウェブ ワン・ドット・ゼロであるが、ウェブワンやウェブいってんぜろと呼ばれることもある。\n概要\nWeb 1.0は主に1990年代から2000年代前半でよくあった形式の、読み取り専用のウェブサイトのことを指す。この時代には、ブログや企業発信が活発化してきたという背景がある。\nこれは、静的ページであり、ユーザーは見ることしかできないことを意味する。例えばApache 2.0やNginxなどの静的ウェブサーバーでindex.htmlで構成されるようなものである。\nこれにデータベースやコメント機能などを備え、ユーザーがウェブサイトに何らかの変更を及ぼすことができるようになったものがWeb 2.0である。\n補足\nWeb 1.0という用語は、一般的にあまり用いられていない。これは、Web 1.0という単語が、Web 2.0の概念ができてから後付けされたからである。\nWeb 2.0が発達してから、それ以前をなんと呼ぶかと議論になったときに決まったのだと思うが、詳しくは知らない。"},"develop/Knowledge/internet/web/1/index":{"slug":"develop/Knowledge/internet/web/1/index","filePath":"develop/Knowledge/internet/web/1/_index.md","title":"Web1","links":[],"tags":[],"content":""},"develop/Knowledge/internet/web/2/Web2.0":{"slug":"develop/Knowledge/internet/web/2/Web2.0","filePath":"develop/Knowledge/internet/web/2/Web2.0.md","title":"Web2.0","links":["develop/Knowledge/internet/web/1/Web1.0"],"tags":[],"content":"Web 2.0、またはWeb2は、Web1.0から進化し、ウェブサイトにユーザーが参加することができるようになった時代を指す語である。\n読み方は、主にウェブツーと呼ばれることが多い。\n概要\nWeb2は、2004年頃から2010年代中盤から始まり、今のインターネットの主役となる立ち位置に君臨している。Tim O’Reillyが初出とされるワードで、この後にWeb1.0という単語が造られた。\nWeb1.0との大きな違いは、ユーザーの立場が「発信」に移行したことである。\nまた、動的なウェブページが増え、PHPやJavaScriptなどの言語の発達へとつながった。APIという概念が誕生するきっかけとなった。\nWeb2が使用されるサービス\n\n掲示板 (2ちゃんねるなど)\nSNS (Twitter, Instagram, …)\n動画配信 (YouTube, ニコニコ動画, TikTok, …)\nWikipedia\n共有ブログ\nクラウドサービス (Google Drive, Dropbox, …)\nスマホアプリ\n\nこれらのサービスでは、ユーザーが「いいね」や「コメント」などを利用して「投稿」、すなわち書き込みの操作を行うことができる。\n問題点\nWeb2の発展により、利便性が向上した反面、問題点も出てきている。\n中央集権\nウェブサイトを管理する企業や、サービスを提供している一部の大企業に力が集中しすぎている。\n問題は、中央の組織がコントロール権を握っていることにある。悪意のある操作によって、情報が捻じ曲げられたりプライバシーが勝手に抜き取られることがある。これをブラックボックス化ということもある。\nこういった場合にそれを抑制する人が存在しないこともまた、問題なのである。\nプライバシー問題\n中央集権でも説明したとおり、ユーザーの情報が気づかないうちに抜き取られることが多々ある。最近は改善してきているが、収集されるデータが不明になっている部分も未だ多いため、注意が必要である。\n検閲\nプラットフォームでは中央の組織によってデータが監視されたり、操作が行われることがある。\nしかも、この操作は中央の組織に託されているため、一度プラットフォーム上でBANされたら、もう「終了」である。意図しないものであっても、だ。\n問題の解決に向けて\nこれらの問題を解決するための新しい思想が、Web3である。\nWeb3が実現した場所はごく少数であるが、この達成に向けて多数のオープンソースコミュニティや企業が動いていることもまた事実だ。"},"develop/Knowledge/internet/web/2/index":{"slug":"develop/Knowledge/internet/web/2/index","filePath":"develop/Knowledge/internet/web/2/_index.md","title":"Web2","links":[],"tags":[],"content":""},"develop/Knowledge/internet/web/3/index":{"slug":"develop/Knowledge/internet/web/3/index","filePath":"develop/Knowledge/internet/web/3/_index.md","title":"Web3","links":[],"tags":[],"content":""},"develop/Knowledge/internet/web/World-Wide-Web":{"slug":"develop/Knowledge/internet/web/World-Wide-Web","filePath":"develop/Knowledge/internet/web/World Wide Web.md","title":"World Wide Web","links":["develop/Knowledge/internet/インターネット","develop/Knowledge/internet/URL","develop/Knowledge/internet/URI"],"tags":[],"content":"World Wide Webは、インターネットで提供されるハイパーテキストシステムである。\nこれより下ではWorld Wide WebをW3と呼ぶこととする。\n概要\nW3のウェブページの記述にはHTMLやXHTMLなどのハイパーテキストのマークアップ言語が使用される。\nW3で使われるハイパーテキストというのは、そもそも、ドキュメント内に別のドキュメントのURL（ハイパーリンク）を埋め込むことで、インターネット上の文書同士を相互に参照可能にするシステムである。\n閲覧者は表示している文書中で、ハイパーリンクがつけられた箇所をクリックしたりしてイベントを発火することでリンク先の文書を表示（ナビゲート）させることができる。\n情報を提供する側はウェブサーバーを公開し、利用者はウェブブラウザのようなサーバーの情報を閲覧するシステムを利用してアクセスする。\nこのアクセスするためのソフトウェアをウェブクライアント、またはWWWクライアントと呼ぶ。\nウェブクライアントのうちで、利用者による閲覧を目的としたものを特にウェブブラウザと呼んでいるのだが、そうでないものにはcurlやwget、requests(Python) などがある。\n1990年代のマルチメディアブームで最も普及したシステムの1つだが、今でも仕様が更新され続けている。\n今ではハイパーテキストだけでなくバイナリを渡すようになっていたり、昔の枠組みを超えるような仕様が出てきたりしていて、アプリケーションの基盤をウェブ化することも行われている。\nインターネットとW3は非常に混同されやすい。詳しくはインターネットとWebの違いを参照。\n名称について\nWorld Wide Webの名称は、それぞれの単語を次のように展開できる。\n\n\nWorld\n世界\n世界規模の\n\n\nWide\n幅の大きな、広い\n\n\nWeb\nクモの巣\n\n\n\nWebという単語はW3を表すのが現在では一般的だが、もともとはクモの巣を意味する単語である。これは、ドキュメント同士のつながりがクモの巣を意味するからである。\nWorld Wide Webは、その頭文字を取って WWW と呼ばれる。\nURLでのwww.example.comのwwwは、World Wide Webのことを指している。\n最後の部分を取って、Webと呼ばれることも多い。日本語でもウェブと呼ばれる。\n派生用語\n\nウェブサイト (Website)\nウェブページ (Webpage)\nウェブブラウザ (Web browser)\nウェブサーバー (Web server)\nウェブアプリ (Web app)\nWeb API\nWebSocket\nウェブフック (Webhook)\nウェブ検索 (Web search)\nウェブスクレイピング\nウェブホスティング\nウェブコンテンツ\nWebM\nWebP\n\n\n\nWeb 2.0\nWeb3\nウェブビーコン (Web beacon)\n\n\n\nウェブカメラ\nウェブ会議\nウェブニュース（ネットニュースとも）\n\n歴史\n発端：情報共有の必要性（1989年）\nWorld Wide Webは、1989年にスイス・ジュネーブにあるCERN（欧州原子核研究機構）にて、ティム・バーナーズ＝リー（Tim Berners-Lee）によって考案された。\n当時のCERNでは、世界中の研究者が共同で研究を進める中で、文書や研究結果を効率的に共有する仕組みが求められていた。\n初期の構成技術（1990年）\nティム・バーナーズ＝リーは、W3を構築するために以下の基本技術を提案・実装した：\n\nHTML（HyperText Markup Language）：文書構造を記述するためのマークアップ言語\nHTTP（HyperText Transfer Protocol）：文書を転送するための通信プロトコル\nURL（Uniform Resource Locator）：リソースの位置を示すアドレス指定方式\n\nさらに、世界初のWebサーバーおよびWebブラウザであるWorldWideWeb（後にNexusと改名）も開発された。\n公開と普及（1991年〜）\n1991年8月6日、CERNはW3の技術を世界に公開し、全世界で誰でも自由に使用できるようにした。\nこれにより、Webは急速に普及を始め、1993年には米国のNCSAによってGUIベースのWebブラウザ「Mosaic」が登場し、Webの一般利用が爆発的に拡大していった。\nW3C（World Wide Web Consortium）の設立（1994年）\n1994年、ティム・バーナーズ＝リーはWebの標準化と発展を目的として、W3C（World Wide Web Consortium） を設立した。\nW3CはMIT（マサチューセッツ工科大学）を拠点とし、HTML、CSS、XML、SVGなど、Webの中核技術の標準化を進めている。\n現代への展開\nWebは静的なハイパーテキストの枠を超えて、JavaScriptによる動的なコンテンツ表示や、Webアプリケーション、WebSocket、HTTP/2・HTTP/3など、通信技術の進化とともに進化を続けている。\nまた、近年ではWeb3という言葉に代表されるように、ブロックチェーン技術との融合や、分散型Webの構想も登場しており、Webの未来はさらに広がりを見せている。\n技術\n仕組み\nW3は、クライアントサーバーモデルに基づくシステムである。\nW3上のドキュメントなどのリソースにアクセスするには、ブラウザにURIを入力するかリンクをたどるなどして、ブラウザに対象のリソースの場所を知らせる。そうすると、リソースに到達するための処理が始まる。\nここでは、www.example.com/home/を用いて説明する。\nまず、URIのサーバー名を表す部分 (www.example.com) がDNSを通してIPアドレスに変換される。なお、IPアドレスが直接URIで指定されている場合はこの処理は行われない。\n次に、URIのスキーム (http://)に基づいて、IPアドレスに対応するウェブサーバーに対して接続を試みる。ここには主にHTMLが使われる。\n要求を受け取ったウェブサーバーは、静的なリソースの場合は即座に対象のリソース(/home/)を要求元へ返す（返答）。\n\n\n                  \n                  INFO\n                  \n                \n\n\nちなみに、皆さんがよく見る 404 NOT FOUND はウェブサーバーが返している。\n\n\n\n返答を受け取ったウェブブラウザは、HTMLファイルやCSSに従いページをレンダリングしたり、画像などのメディアやリンクをはめ込むんだりする作業を行う。\nこれらを経て、最終的に画面上のページが生み出される。\nなお、Web APIの場合はこれらとは大きく違った処理が行われる。 詳しくはWeb APIを参照。\n標準規格\nW3を構成する様々な概念は標準規格化されているが、その中でハイパーテキストを実現する最も基礎的な概念として以下の3つを挙げる。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称略称内容標準化団体Uniform Resource LocatorURLリソース位置識別子WHATWGHypertext Transfer ProtocolHTTP通信プロトコルIETFHypertext Markup LanguageHTMLハイパーテキストの構造WHATWGこのほか、プログラムからのドキュメント操作を定義するDOM Standard、HTTPを抽象化したFetch Standardなど、様々な仕様が定義および整備されている。\nまた、Web APIの標準規格にはRest APIなどもある。"},"develop/Knowledge/internet/web/index":{"slug":"develop/Knowledge/internet/web/index","filePath":"develop/Knowledge/internet/web/_index.md","title":"ウェブ","links":[],"tags":[],"content":""},"develop/Knowledge/internet/インターネット":{"slug":"develop/Knowledge/internet/インターネット","filePath":"develop/Knowledge/internet/インターネット.md","title":"ウェブとインターネット","links":["IP","develop/Knowledge/internet/TCP-IP","develop/Knowledge/internet/application/アプリケーション層","develop/Knowledge/internet/web/World-Wide-Web"],"tags":["MOC"],"content":"インターネット (the Internet) は、インターネット・プロトコルを用いて接続された、コンピューター同士の世界規模の情報通信網である。\n略してネット。\n概要\nインターネットは、異なる種類のネットワーク機器や回線、OSを使用していても、共通の通信ルール（プロトコル） を用いることで相互に接続されている。この通信ルールの中心となるのが IP であり、これによって世界規模のネットワークが構築・維持されている。\nコンピュータネットワークでは\nコンピュータネットワークでは、コンピューターのMACアドレスなどで通信できるLAN同士を、IPで繋いだWANが、インターネットである。\nLAN間の通信交換ができれば、それはインターネットと呼べる。\nつまり、たくさんのLAN同士を繋げた世界規模のネットワークが、一般の「インターネット」である。\nインターネットの構造\nインターネットはおおまかに、次のような階層構造で成り立つ。\nなお、ここでは所要な用語を箇条書きで載せているが、これだけには限らない。\nネットワークインターフェース層\nWi-FiやEthernetなどの物理的な通信手段。\n5Gや4G、LTEのスマホの通信方法もインターフェース層である。\n\nWi-Fi\nEthernet\nBluetooth\nLTE\n4G\n5G\nLoRa\n\nインターネット層\nIPによってネットワーク上の住所（IPアドレス）を特定し、データを目的地に届ける。\n\nIP\n\nトランスポート層\nTCPやUDPによって、データの送信信頼性や順序、送るデータを管理する。\n\nTCP\nUDP\n\nアプリケーション層\nHTTP、SSH、DNSなど、実際にユーザーの目に届く、ユーザーが使うサービスを提供する。\n\nHTTP\nSSH\nDNS\nSSL\nFTP\nSFTP\nVNC\nRDP\n\nインターネットとWebの違い\nしばしば混同されがちだが、インターネットは通信網そのものであり、World Wide Web はその上で動くサービスの一つである。たとえば、メール、ファイル転送、オンラインゲームもインターネット上のサービスだ。\n\nインターネット\nコンピューター同士が相互に接続する通信網。\nインターネットを使ったサービス\nメールやファイル転送、動画配信、オンラインゲームなど、インターネット上で動作するサービスのこと。WWWはこちら側に当てはまる。\n\nなお、「ウェブページ」や「ウェブサイト」は、これらとはまた別である。\n歴史\nインターネットの起源は1960年代のARPANET（アーパネット） にさかのぼる。これは米国国防総省の研究機関ARPAによって開発された、分散型通信ネットワークであった。\nその後、学術機関・企業へと広がり、1990年代以降、民間への普及とともに世界規模のネットワークへと発展した。\n現代の役割\n今日のインターネットは、個人の生活から企業、行政、教育医療、エンタメ、経済、金融に至るまで、社会全体に浸透している。特にスマートフォンやクラウドサービス、AI、IoTの普及によって、その重要性はますます高まっている。\n問題点\n問題のまとめはこちら。（作成中）\n2010年代から、特にスマートフォンの普及によってインターネット上に接続するデバイスは急激に増加した。\n\nデバイスが増えたことで、デバイスに割り当てるためのIPアドレスが枯渇するといった問題が発生している。\n↪ IPアドレス枯渇問題\n同じくデバイスが増えたことで、通信量も同時に増加した。これにより、サーバーやインフラが対応しきれずにラグや速度制限がかかってしまうような問題がある。\n↪ トラフィック問題\nまた、インターネットの格差が地域によって広がっており（情報格差）、例えば東京や大阪などの都市部では光回線や5Gが普及しているのに対して、地方や途上国ではインターネットが安定しないなどの問題がある。\n↪ デジタル・ディバイド\n\nインターネットの急速な成長により、ユーザー側の対応も求められている。\n\n例えばSNSなどでは、正しい使い方が守られず犯罪行為に巻き込まれることが度々起こっている。\n↪ インターネットを悪用した犯罪行為\n同じくSNSなどの普及で、誤った情報や勘違いが広く知れ渡りやすくなってしまっている問題がある。\nまた、AIが生成した画像などのコンテンツが、実際の現実世界の情報と見分けがつかなくなってきており、これを見極められなかった人によって拡散されてしまう問題がある。\n↪ フェイクの拡散\nインターネットは、自由でオープンな空間という思想に基づいて作られたものだが、これが文化の破壊や国のローカルルールと衝突する問題がある。有名な例としては、中国のグレートファイアウォールなどがある。\n↪ インターネットと現実の対立\nインターネットの検索履歴やSNSの情報は監視（トラッキング）されており、それが広告代理人などに悪用されるプライバシー面でのリスクがある。\nこれを防ぐために、OSSの開発も盛んになってきているが、依然ユーザーは注意を払う必要がある。\n↪ インターネットのプライバシーリスク\n\nまた、インターネットに古い機能が残っていたり、進化に追いつけていないことで発生する問題もある。\n\n古いプロトコルに脆弱性が見つかっているのに、それが未だに使われている場所がある。例えばFTPやTelnetは傍聴される危険性があり、セキュリティ面で推奨されない。\n↪ プロトコルのレガシー化\nHTTPのウェブサイトは、傍聴の危険性がある。それでも、HTTPSを使用するには一定のコストがかかるため、導入が難しいという問題がある。\n↪ HTTPSのハードル\nHTMLやCSS、JavaScriptの自由度が上がったことにより、多くのアプリケーションのウェブアプリ化（WASM）や、デザイン性を追求したウェブページの制作が進んできているが、それに含まれる画像やCSS等のメディア、JavaScriptが読み込み速度に影響を与えている。\n↪ ウェブページの肥大化\n"},"develop/Knowledge/lang/index":{"slug":"develop/Knowledge/lang/index","filePath":"develop/Knowledge/lang/_index.md","title":"エンジニアリングに関する言語","links":[],"tags":[],"content":""},"develop/Knowledge/lang/programming/AOTコンパイル":{"slug":"develop/Knowledge/lang/programming/AOTコンパイル","filePath":"develop/Knowledge/lang/programming/AOTコンパイル.md","title":"AOTコンパイル","links":["develop/Knowledge/lang/programming/Rust/Rust"],"tags":[],"content":"AOTコンパイル (英: AOT Compile) は、プログラムのコードやILをコンパイル時に機械語へ変換するコンパイルの方法のこと。対義語はJITコンパイルである。\nAOTは、Ahead-Of-Timeの頭文字をとったものであり、事前コンパイルとも呼ばれる。\n概要\nJITコンパイルでは、アプリケーションの実行直前または実行中に、ILを実行環境に合わせた機械語にコンパイルするため、インタプリタ言語よりは高速ではあるが、ILからの実行時コンパイルが挟まるため最初に低速になることが多い。これは、ゲームなどではほとんど問題になることはないが、頻繁に実行と停止が繰り返す、コマンドラインツールなどで問題になりやすい。\nそれに対比して、AOTコンパイルは、比較的性能の高い、開発環境やビルド環境で行われるように、JITコンパイルよりもコンパイルに時間を割くことができる。また、コンパイラに渡すオプションによって最適化レベルを開発者が操作しやすい。\nしかしながら、AOTコンパイルしたアプリケーションが常にJITコンパイルしたコードよりも高速であるとは限らない。なぜなら、AOTコンパイルは特定のOSなどで共通した命令セットを用いて行われるからだ。一方でJITコンパイル先は実行環境に対してネイティブであるため、AOTよりも根強くコードが実行できる可能性がある。\n例を出すと、Rustのターゲットアーキテクチャは、Linuxの64ビットCPUに対してx86_64-unknown-linux-gnuを使用できる。しかし、Linuxでx86_64の中でもDebian系、Arch系、RedHat系などといった種類もあるため、そこに合わせてコンパイルできるというのがJITの１つの魅力だといる。\n.NETのAOTサポート\nもともとC#をはじめとした.NETでは、JITコンパイル形式が基本だった。だが、.NET Frameworkでは、アセンブリからネイティブコードを生成できるツール「Ngen.exe」がサポートされていた。しかし、これは主に起動と終了を繰り返す、サーバー向けのものであり、また手軽に利用できるようなものではなかった。\nそこで、.NET Core 3ではAOTコンパイルの１つとしてReadyToRunがサポートされた。また、.NET 7からはネイティブAOTがサポートされるようになったが、互換性のあるライブラリはまだ限定されている。\n言語\nAOTコンパイルが主に使用される主要な言語は以下。\n\nC/C++\nRust\nGo\nD言語\nZig\nNim\nHaskell\nFortran\n\n一部でAOTコンパイルをサポートする主要な言語は以下。\n\nJava\n.NET C#\nPython\n"},"develop/Knowledge/lang/programming/C++/C++":{"slug":"develop/Knowledge/lang/programming/C++/C++","filePath":"develop/Knowledge/lang/programming/C++/C++.md","title":"C++","links":["develop/Knowledge/lang/programming/procedural/手続き型","develop/Knowledge/lang/programming/object-orient/オブジェクト指向","develop/Knowledge/lang/programming/プログラミングパラダイム"],"tags":["MOC"],"content":"C++ (シープラスプラス) は、汎用プログラミング言語のひとつである。\nC言語の特徴を継承しつつ、手続き型プログラミングや抽象・オブジェクト指向プログラミング、ジェネリックプログラミングなどの複数のプログラミングパラダイムが組み合わせられている（マルチパラダイムプログラミングの）言語である。\nハードウェアを直接操作するような低水準言語としても、複雑なソフトウェアを開発する高水準言語としても使用できる。\n概要\nC++は歴史を遡るとかなり古い。\n1979年、C with Classesの開発が開始され、途中大規模ソフトウェアの開発はSimulaが有用だということに気がついた。そのため、その特徴を取り入れつつ、クラスと派生クラス、型付けの強化、インライン関数、デフォルト引数の機能をCに追加したものを、1985年10月に最初の商用リリースした。\n1983年にはC with ClassesはC++に改名された。\n\nあのさー、C++を説明するのはむずくないか？ｗ"},"develop/Knowledge/lang/programming/C++/index":{"slug":"develop/Knowledge/lang/programming/C++/index","filePath":"develop/Knowledge/lang/programming/C++/_index.md","title":"C++","links":[],"tags":[],"content":""},"develop/Knowledge/lang/programming/Rust/Rust":{"slug":"develop/Knowledge/lang/programming/Rust/Rust","filePath":"develop/Knowledge/lang/programming/Rust/Rust.md","title":"Rustの概要","links":["develop/Knowledge/lang/programming/ガベージコレクション","rustc","develop/Knowledge/lang/programming/Rust/crate","develop/Knowledge/lang/programming/Rust/所有権","develop/Knowledge/lang/programming/Rust/デリファレンス"],"tags":["MOC"],"content":"Rustは、性能やメモリ安全性を目指して作られた、マルチパラダイムのシステムプログラミング言語である。C系の言語を置き換えることを目標としているが、ポインターなどの概念が存在せず安全に開発を行うことができる。\n読み方はラスト。\n概要\nRustにはポインターが存在しない。その代わり、借用といって、参照を取るシステムによって値を共有することができる。また、値の本体を、変数やメンバーへの代入、関数での引数としての使用を行うときは、その値は移動する。これを譲渡という。\nこのシステムによって、ガベージコレクションを必要としない安全なメモリ管理ができるのである。\nRustでは、ほとんどのエラーをコンパイラがキャッチできるように設計されている。そのため、ランタイムエラーは従来の言語よりも少ない。Javaで最も多いとされるNullPointerExceptionのような、Rustでいう参照によって発生するエラーはコンパイルエラーとして扱われる。\nRustは、並列・並行処理、非同期処理を標準でサポートする。参照システムは安全に並行処理を行うことができるように設計されている。\nコード\nHelloWorldは以下の通り。\nfn main() {\n\tprintln!(&quot;Hello, World!&quot;);\n}\nそう、とても単純なのである。これはRustの単純な構文と、マクロのおかげである。\n用語集\n\ncrate\n所有権\nrustc - Rust compiler\nデリファレンス\n"},"develop/Knowledge/lang/programming/Rust/index":{"slug":"develop/Knowledge/lang/programming/Rust/index","filePath":"develop/Knowledge/lang/programming/Rust/_index.md","title":"Rust","links":[],"tags":[],"content":""},"develop/Knowledge/lang/programming/Rust/crate":{"slug":"develop/Knowledge/lang/programming/Rust/crate","filePath":"develop/Knowledge/lang/programming/Rust/crate.md","title":"クレート","links":["develop/Knowledge/lang/programming/Rust/Rust","develop/Knowledge/libs/ライブラリ"],"tags":[],"content":"クレートとは\nクレート (Crate)は、Rustのコードをまとめる基本単位の1つ。Rustのプロジェクトやライブラリのことを指す。\nコンパイル先の違いによってバイナリクレートとライブラリクレートに分けられる。\nバイナリクレート\nCLIアプリケーションやGUIアプリケーションなどを含む、実行可能なプログラムを提供するクレートは一般的に『バイナリクレート』と呼ばれる。\nコンパイル時にバイナリとしてビルドされ、バイナリファイルを実行したときに関数mainが呼び出されるようになっている。\nデフォルトではsrc/main.rsがバイナリクレートの定義になる。\nまた、src/bin/*.rsがすべてバイナリとして認識される。\nfn main() {\n\tprintln!(&quot;Hello, World!&quot;);\n}\n実行すると、CLIでHello, World!が出力される。\nまた、都度Cargo.tomlを編集して別のバイナリクレートを同じプロジェクト内に作ることもできる。\n[package]  \nname = &quot;mypackage&quot;\nversion = &quot;0.1.0&quot;\nedition = &quot;2024&quot;\n \n[[bin]]  \nname = &quot;run-all&quot;\npath = &quot;src/run.rs&quot;\nライブラリクレート\nライブラリを提供するクレートは、『ライブラリクレート』と呼ばれる。\n一般的にいくつもの構造体やトレイト、関数などを定義する。\nデフォルトでsrc/lib.rsがライブラリクレートの中心となる。ここでモジュールなどを定義する。\npub mod client;\npub mod server;\n \npub struct MyStruct {\n\t&amp;str name,\n}\n \nimpl MyStruct {\n\tpub fn name(&amp;self) -&gt; &amp;str {\n\t\tself.name\n\t}\n}\nモジュールごとにmod.rsを定義して、その中に更にモジュールを定義したりすることもできる。"},"develop/Knowledge/lang/programming/Rust/rustc":{"slug":"develop/Knowledge/lang/programming/Rust/rustc","filePath":"develop/Knowledge/lang/programming/Rust/rustc.md","title":"Rustのコンパイラについて","links":[],"tags":[],"content":"概要\nrustc\n\nAOTコンパイル\nクロスコンパイルが可能 (Windows, Mac, Linux, iOS, Android, WASM)\n実行時に発生する可能性のあるエラーをチェックしてくれます\n\n実行時のエラーを最大限まで減らすため、コンパイルには比較的時間がかかります。\n\n\n                  \n                  Important\n                  \n                \n\n\nRustのコンパイラ、疲労困憊ラ\n\n\n"},"develop/Knowledge/lang/programming/Rust/所有権":{"slug":"develop/Knowledge/lang/programming/Rust/所有権","filePath":"develop/Knowledge/lang/programming/Rust/所有権.md","title":"所有権システム","links":[],"tags":[],"content":"所有権\nRustには”所有権システム”というのがあります。\nこれには、ゼロコストのメモリ管理ができるという利点があります。\nこれによりGCが不必要となり、速度が圧倒的に上がります。\n関数やマクロなどで値を使用したとき、その値の所有権は関数へ移動します。\nfn main() {\n\tlet a: String = &quot;text&quot;.to_string();\n\t\n\tcustom_function(a);  // aの所有権はcustom_functionに渡る\n\t// ここより下ではもうaは使用できない\n\t\n\tprintln!(&quot;移動後の値の使用: {}&quot;, a);  // コンパイルエラー\n}\n \n// \nfn custom_function(text: String) {\n\tprintln!(&quot;関数内での値: {}&quot;, text);\n\t// ここより下ではもうtextは使用できない\n}\n\nまた、main関数内の変数aはfn main→custom_function→println!のように移動しています。\nprintln!関数に渡ったあと、その関数内でスコープを抜けるときに変数はメモリ上から破棄されます。\n\nつまり、custom_function関数でaを使ったあとにはもう値は存在しないこととなります。\n\n"},"develop/Knowledge/lang/programming/index":{"slug":"develop/Knowledge/lang/programming/index","filePath":"develop/Knowledge/lang/programming/_index.md","title":"プログラミング言語","links":[],"tags":[],"content":""},"develop/Knowledge/lang/programming/functional/index":{"slug":"develop/Knowledge/lang/programming/functional/index","filePath":"develop/Knowledge/lang/programming/functional/_index.md","title":"関数型プログラミング","links":[],"tags":[],"content":""},"develop/Knowledge/lang/programming/functional/関数型":{"slug":"develop/Knowledge/lang/programming/functional/関数型","filePath":"develop/Knowledge/lang/programming/functional/関数型.md","title":"関数型プログラミング","links":["develop/Knowledge/lang/programming/プログラミングパラダイム","develop/Knowledge/lang/programming/Rust/Rust"],"tags":["MOC"],"content":"関数型プログラミング (英: Functional programming)とは、数学的な意味での『関数』を主に使用するプログラミングパラダイムである。\n関数型プログラミングを推奨している言語を、関数型プログラミング言語 (functional programming language) というが、略して関数型言語 (functional language)と呼ぶこともある。\n概要\n関数型プログラミングでは、関数を軸にプログラミングを行う。\nここでの関数とは、数学的な関数、すなわち参照透過性をもつものを指す。\n参照透過性とは、数学的な関数と同じように、引数が同じであれば同じ値を返す性質である。\n例としてこのPythonコードを見ていただく。\ndef expression(x):\n    return x ** 2 # xの2乗\nここでは、x=3のときには9、x=4のときは16のように、引数が同じときは常に同じ値を返す。\n関数プログラミングでは、関数を使って組み立てた式が軸となっている。プログラミング言語ではよく「関数を実行する」や「関数を呼び出す」と表現するが、関数型プログラミング言語では「式を評価する」という表現もよく使われる。\n言語\n主要な言語は以下の通り。\n特化\n\nElm\nScala\nHaskell\nLISP\n\nマルチパラダイム\n\nPython\nJavaScript\nRuby\nKotlin\nRust\n"},"develop/Knowledge/lang/programming/object-orient/index":{"slug":"develop/Knowledge/lang/programming/object-orient/index","filePath":"develop/Knowledge/lang/programming/object-orient/_index.md","title":"オブジェクト指向プログラミング","links":[],"tags":[],"content":""},"develop/Knowledge/lang/programming/object-orient/オブジェクト指向":{"slug":"develop/Knowledge/lang/programming/object-orient/オブジェクト指向","filePath":"develop/Knowledge/lang/programming/object-orient/オブジェクト指向.md","title":"オブジェクト指向プログラミング","links":["develop/Knowledge/lang/programming/プログラミングパラダイム","develop/Knowledge/lang/programming/Rust/Rust"],"tags":["MOC"],"content":"オブジェクト指向 (オブジェクトしこう、英: object-oriented) とは、プログラミングのために用いられる考え方の1つである。根源的には、既に存在していたプログラミングパラダイムを説明するためにできた言葉であり、それはGUIとも密接に関係しているものだった。\nこのパラダイムを組み込んだプログラミングをオブジェクト指向プログラミング (Object-Oriented Programming) と呼び、OOPと略される。\nオブジェクトとは\nプログラミング的な観点では、データ構造とその手続きを一つにまとめたものを指しており、例えばC++, C#, Java言語のクラスなどがあたる。\n発案\nオブジェクト指向（object-oriented）という言葉自体は、1972年から80年にかけて開発されたプログラミング言語「Smalltalk」の開発者が、その言語設計を説明する過程で誕生している。\nしかし、1960年代末の「Simula」プログラミング言語の開発者たちの中では、先にジョーク的に使用された記録もあり、明確にはわからない。\n言語\nオブジェクト指向プログラミングができる言語は非常に多い。そのため、主要な言語に絞る。\n特化\nほぼすべてをオブジェクトとして扱う、オブジェクト指向プログラミングの言語は以下の通り。\n\nJava\nC# (最近はマルチパラダイムになりつつある)\nSmalltalk - 元祖オブジェクト指向\nRuby\nObjective-C\nDart\n\nマルチパラダイム\nマルチパラダイム言語なうち、OOP的なプログラミングができる言語は以下の通り。\n\nPython\nJavaScript\nRust\nSwift\nKotlin\nScala\nC++\nGo\nPHP\nTypeScript\n\nコーディング\nオブジェクト指向では、主にクラス・継承・メソッド・インスタンスなどを組み合わせてプログラミングを行う。\n# クラスの定義\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n \n    def speak(self):\n        print(f&quot;{self.name} が鳴いています！&quot;)\n \n# クラス継承（DogはAnimalの子）\nclass Dog(Animal):\n    def speak(self):\n        print(f&quot;{self.name}：「ワン」&quot;)\n \n# さらに別のクラス（継承の多様性）\nclass Cat(Animal):\n    def speak(self):\n        print(f&quot;{self.name}：「ニャー」&quot;)\n \n# オブジェクト（インスタンス）を作る\ndog = Dog(&quot;ポチ&quot;)\ncat = Cat(&quot;タマ&quot;)\n \n \ndog.speak()  # → ポチ：「ワン」\ncat.speak()  # → タマ：「ニャー」\n "},"develop/Knowledge/lang/programming/procedural/index":{"slug":"develop/Knowledge/lang/programming/procedural/index","filePath":"develop/Knowledge/lang/programming/procedural/_index.md","title":"手続き型プログラミング言語","links":[],"tags":[],"content":""},"develop/Knowledge/lang/programming/procedural/手続き型":{"slug":"develop/Knowledge/lang/programming/procedural/手続き型","filePath":"develop/Knowledge/lang/programming/procedural/手続き型.md","title":"手続き型プログラミング","links":["develop/Knowledge/lang/programming/プログラミングパラダイム"],"tags":["MOC"],"content":"手続き型プログラミング (英: Procedural programming) は、コンピュータが実行すべき命令や手続きを、順に記述していくことでプログラムを構成するスタイルのプログラミングパラダイムである。\n『手続き』は、言語によってはサブルーチン、関数、メソッドなどと呼ばれることもあるが、手続き型においてはほぼ同じものとしてみなされている。\n概要\n手続き型では、プログラムはコードを上から下へ順番に動作する。また、関数に共通処理をまとめることもできる。ただし、関数の定義も上から下へ実行されることが多く、定義の順序が重要となる。\n言語\n主要な言語でいうとこのような感じになる。\n特化\n\nC\nPascal\nFortran\nBASIC\n\nマルチパラダイム\n\nPython\nJavaScript\nRuby\nSwift\nC++\nGo\n\nコード\n手続き型プログラミング言語のコードは、まさに順序付けされた工程リストだ。\n#include &lt;stdio.h&gt;\n \nint sum(int array[], int length) {\n\tint sum = 0;\n\t\n    for (int i = 0; i &lt; length; i++) {\n        sum += array[i];\n    }\n\t\n\treturn sum;\n}\n \nint main() {\n    int numbers[] = {10, 20, 30, 40, 50};\n    int length = sizeof(numbers) / sizeof(int);\n    int numbers_sum = sum(numbers, length);\n    float average;\n\t\n    average = (float)numbers_sum / length;\n\t\n    printf(&quot;平均は %.2f です\\n&quot;, average);\n\t\n    return 0;\n}\nこれは、配列numbersから平均を導くコードである。実行結果は\n平均は 30 です\n\nとなる。\n関数sumを定義した後に関数mainを呼び出しているため正常に実行できるが、sumをmainの下に定義するとコンパイルエラーとなる。（最近のgccは許してくれること多いけど）\n備考\nなお、この「上から下へ実行される」というルールは他のプログラミング言語でもよくみられるものだ。並列処理でない限りはほとんどの言語がこのルールに則って動く。\nしかも、C#などの一部のマルチパラダイム言語ではローカルスコープで定義したラムダ式や関数は定義より上からは呼び出せないため、手続き型のパラダイムが顕著に現れている例だといえる。"},"develop/Knowledge/lang/programming/プログラミングパラダイム":{"slug":"develop/Knowledge/lang/programming/プログラミングパラダイム","filePath":"develop/Knowledge/lang/programming/プログラミングパラダイム.md","title":"プログラミングパラダイム","links":["develop/Knowledge/lang/programming/object-orient/オブジェクト指向","develop/Knowledge/lang/programming/procedural/手続き型","develop/Knowledge/lang/programming/Rust/Rust","develop/Knowledge/lang/programming/functional/関数型"],"tags":["MOC"],"content":"プログラミングパラダイムとは、プログラミングにおける考え方のスタイルのことである。\n概要\nプログラミングパラダイムは、プログラマーにとってどのようにプログラミングを行うべきかという見方を与えるものである。\nプログラミングパラダイムでは、推奨されていることや禁じられていることがある程度決まっているが、厳密に定義している書類やウェブサイトは存在しない。そのため、ある意味暗黙的なルールとなっている部分がある。\nそれぞれの言語ではプログラミングパラダイムが顕著に表れる部分がある。また、複数のプログラミングパラダイムを使用している言語（マルチパラダイムプログラミング言語）も存在する。\nプログラミングパラダイムの種類\nオブジェクト指向\n「オブジェクト」でプログラムを構築する考え方。\nデータの構造と手続きを1つにまとめたものをオブジェクトとして扱う（らしい）。\npublic class MyObject() {\n\tpublic class void MyFunction() {\n\t\tConsole.WriteLine(&quot;Hello World&quot;);\n\t} // これが手続き（関数）\n} // これがオブジェクト（クラス）\n主なオブジェクト指向プログラミング言語\n\nObjective-C\nC++\nC#\nJava\nPython\n\n詳しくはオブジェクト指向プログラミングを参照。\n手続き型\n一連の手続きや関数でプログラムを構築する考え方。\nコードは上から下へ順番に実行される。\n#include &lt;stdio.h&gt;\n \n// 関数の定義\nvoid greet() {\n    printf(&quot;Hello, world!\\n&quot;);\n}\n \nint main() {\n    // 変数の宣言と初期化\n    int a = 5;\n    int b = 3;\n    int sum = a + b;\n \n    // 関数の呼び出し\n    greet();\n    printf(&quot;Sum: %d\\n&quot;, sum);\n \n    // 条件分岐\n    if (sum &gt; 5) {\n        printf(&quot;Sum is greater than 5\\n&quot;);\n    } else {\n        printf(&quot;Sum is 5 or less\\n&quot;);\n    }\n \n    // ループ\n    for (int i = 0; i &lt; 5; i++) {\n        printf(&quot;i: %d\\n&quot;, i);\n    }\n \n    return 0;\n}\n主な手続き型プログラミング言語\n\nC\nPascal\nBASIC\nPython\n\n詳しくは手続き型プログラミングを参照。\n関数型\nデータを変えず、関数の組み合わせだけでプログラムを構築する考え方。\n手続き型との大きな違いは、変数が不変（イミュータブル）だという点。\nconst addOne = x =&gt; x + 1;\nconsole.log(addOne(3)); // 4（xは変わらない）\n主な関数型プログラミング言語\n\nHaskell\nElixir\nJavaScript\nRust\n\n詳しくは関数型プログラミングを参照。"},"develop/Knowledge/lang/エンジニアリングに関連する言語":{"slug":"develop/Knowledge/lang/エンジニアリングに関連する言語","filePath":"develop/Knowledge/lang/エンジニアリングに関連する言語.md","title":"エンジニアリングに関連する言語","links":["develop/Knowledge/lang/programming/プログラミング言語"],"tags":["MOC"],"content":"ここでは、プログラミングに関係する言語、例えばプログラミング言語、マークアップ言語、スクリプト言語などについて述べる。"},"develop/Knowledge/libs/index":{"slug":"develop/Knowledge/libs/index","filePath":"develop/Knowledge/libs/_index.md","title":"ライブラリ","links":[],"tags":[],"content":""},"develop/Knowledge/libs/ui/GUIライブラリ":{"slug":"develop/Knowledge/libs/ui/GUIライブラリ","filePath":"develop/Knowledge/libs/ui/GUIライブラリ.md","title":"GUIライブラリまとめ","links":["develop/Knowledge/libs/ライブラリ","egui","iced"],"tags":["MOC"],"content":"GUI（グラフィカルユーザーインターフェース）を表示するためのライブラリ。\nここでは私が知る限りのGUIライブラリおよびGUIフレームワークを書いておく。\nRust\n\negui\niced\nTauri\nDruid (開発停止)\nXilem\nSlint\n\nFlutter\nFlutterはそのもの全体がUIフレームワークだと言えるだろう。\nC#\n\nWinForms\nWPF\nWinAPI\nMAUI\n\n\n\nAvalonia\nUNO Platform\nXamarin (開発停止)\n\nGo\n\nGio\n\nC++\n\nQt\nXamarin C++\n"},"develop/Knowledge/libs/ui/index":{"slug":"develop/Knowledge/libs/ui/index","filePath":"develop/Knowledge/libs/ui/_index.md","title":"UIライブラリ","links":[],"tags":[],"content":""},"develop/Knowledge/libs/ui/egui/index":{"slug":"develop/Knowledge/libs/ui/egui/index","filePath":"develop/Knowledge/libs/ui/egui/_index.md","title":"egui UIライブラリ","links":[],"tags":[],"content":"エグい！！（そうじゃない）"},"develop/Knowledge/libs/ui/egui/egui":{"slug":"develop/Knowledge/libs/ui/egui/egui","filePath":"develop/Knowledge/libs/ui/egui/egui.md","title":"egui","links":["develop/Knowledge/lang/programming/Rust/Rust","develop/Knowledge/libs/ui/GUIライブラリ"],"tags":["グラフィック"],"content":"特徴\n\negui: an easy-to-use immediate mode GUI in Rust that runs on both web and native\n\n日本語にすると、\n\nWebとネイティブアプリケーションとして動作できる、Rustの使いやすい即時モードのGUIライブラリ。\n\nとなりますね。\n即時モードについて\n即時モードとは、アプリケーションが常に更新され続ける形のUI構築システムのことで、ウィンドウでは定期的に再描画処理が呼ばれる。\nサンプルコード\nui.heading(&quot;My egui Application&quot;);\nui.horizontal(|ui| {\n    ui.label(&quot;Your name: &quot;);\n    ui.text_edit_singleline(&amp;mut name);\n});\nui.add(egui::Slider::new(&amp;mut age, 0..=120).text(&quot;age&quot;));\nif ui.button(&quot;Increment&quot;).clicked() {\n    age += 1;\n}\nui.label(format!(&quot;Hello &#039;{name}&#039;, age {age}&quot;));\nui.image(egui::include_image!(&quot;ferris.png&quot;));\nやっぱりわかりやすいね。\n他のGUIライブラリとは違って、ボタンのクリックの処理がイベントハンドラではないところが少し気になると思うが、clicked()はボタンが押された瞬間だけtrueになるため、これでボタンの押された処理が実装できる。\n私は以前Scratchをやっていましたが、それにとても近いと思います。"},"develop/Knowledge/libs/ui/iced/index":{"slug":"develop/Knowledge/libs/ui/iced/index","filePath":"develop/Knowledge/libs/ui/iced/_index.md","title":"iced","links":[],"tags":[],"content":""},"develop/Knowledge/libs/ui/iced/iced":{"slug":"develop/Knowledge/libs/ui/iced/iced","filePath":"develop/Knowledge/libs/ui/iced/iced.md","title":"Iced","links":["develop/Knowledge/lang/programming/Rust/Rust","develop/Knowledge/libs/ui/GUIライブラリ","wgpu","develop/Knowledge/libs/ui/iced/icedのバックエンドの特性"],"tags":[],"content":"iced (crates.io, GitHub)はRustで書かれたGUIライブラリの1つであり、宣言的なUIの定義が特徴である。\n特徴\n\nA cross-platform GUI library for Rust focused on simplicity and type-safety. Inspired by Elm.\n\n日本語にすると、\n\n単純性と型安全性に注視したRustのクラスプラットフォームGUIライブラリ。Elmにインスパイアされました。\n\nとなりますね。\nクロスプラットフォーム\nデスクトップ（Windows、macOS、Linux）とWeb（WebAssembly）で、同じコードで動作します。\nまた、Rustはクロスコンパイルが可能なので、その点はかなり便利じゃないかな―って思います。\n宣言的UI\nUIを宣言する形で書く。\nつまり、UIを「どう見えるべきか」を宣言的に、単純に書くことができる。\n例えば、ボタンやテキストなどをコードで直感的に記述できるよ。\n非同期対応\nアプリケーション全体が非同期タスク（async）に対応しているので、APIリクエストや長時間かかる処理も簡単に扱える。\nよかったね、Rustが非同期対応してて。\nプラグイン可能な柔軟性\nカスタムウィジェットやスタイルを実装できるので、自由度が高い。\nちなみにこれの実装にはちょっとクセが合ったりします。\nバックエンド\nicedはバックエンドにwgpuを採用している。\nまた、パフォーマンスこそまずまずだが、tiny-skiaにも対応している。\n↪icedのバックエンドの特性\nサンプルコード\nicedは、関数型言語Elmのアーキテクチャにインスパイアされて設計されています。\nアプリの状態（State）を明確に管理しやすく、UIイベントもスッキリと書くことができます。\n構成要素:\n\nModel: アプリケーションの状態\nMessage: ユーザーやシステムからのイベント\nUpdate: 状態を更新するロジック\nView: 状態に基づいてUIを描画\n\n#[derive(Default)]\nstruct Counter {\n    value: i32,\n}\n \n#[derive(Debug, Clone, Copy)]\npub enum Message {\n    Increment,\n    Decrement,\n}\n \n \nuse iced::widget::{button, column, text, Column};\n \nimpl Counter {\n    pub fn view(&amp;self) -&gt; Column&lt;Message&gt; {\n        column![\n            button(&quot;+&quot;).on_press(Message::Increment),\n            \n            text(self.value).size(50),\n            \n            button(&quot;-&quot;).on_press(Message::Decrement),\n        ]\n    }\n\t\n\tpub fn update(&amp;mut self, message: Message) {\n        match message {\n            Message::Increment =&gt; {\n                self.value += 1;\n            }\n            Message::Decrement =&gt; {\n                self.value -= 1;\n            }\n        }\n    }\n}\n \nfn main() -&gt; iced::Result {\n    iced::run(&quot;A cool counter&quot;, Counter::update, Counter::view)\n}\n関数view部分にはマクロと純粋関数を使用しています。ここに関数型言語としての特徴が出てきていますね。\nボタンを押したときのイベントをon_pressで割り当て、イベント発生時にupdate関数が呼び出されます。\nself.valueを変更すると、view関数が呼び出されます。\nそうやってローテーションしていきます。"},"develop/Knowledge/libs/wgpu/index":{"slug":"develop/Knowledge/libs/wgpu/index","filePath":"develop/Knowledge/libs/wgpu/_index.md","title":"Wgpu","links":[],"tags":[],"content":""},"develop/Knowledge/libs/wgpu/wgpu":{"slug":"develop/Knowledge/libs/wgpu/wgpu","filePath":"develop/Knowledge/libs/wgpu/wgpu.md","title":"wgpu","links":["develop/Knowledge/platform/graphics/webgpu/WebGPU","develop/Knowledge/lang/programming/Rust/Rust","develop/Knowledge/lang/programming/Rust/crate"],"tags":["GPU","グラフィック"],"content":"wgpuはWebGPUのAPIをRustで実装したクレートである。\n\n\n                  \n                  IMPORTANT\n                  \n                \n\n\nラッパーではなく、WebGPUの設計に則ってRustで実装された、ピュアRustのライブラリである。\n\n\n\nwgpuは、Windows, MacOS, Linux, Web (WASM) の複数プラットフォームで動作する。\nRustのメモリ安全性を活かし、GPUのリソースを安全に管理したり、楽に並行処理が可能である。また、直接的に非同期処理をサポートしている。\nWGSLシェーダー\nWebGPUのシェーダーはWGSL (拡張子.wgsl)で定義する。この構文はRustに非常に似ている。\n// 頂点シェーダ\n@vertex\nfn vs_main(@builtin(vertex_index) vertex_index: u32) -&gt; @builtin(position) vec4&lt;f32&gt; {\n    let positions = array&lt;vec2&lt;f32&gt;, 3&gt;(\n        vec2&lt;f32&gt;(0.0, 0.5),     // 上\n        vec2&lt;f32&gt;(-0.5, -0.5),   // 左下\n        vec2&lt;f32&gt;(0.5, -0.5)     // 右下\n    );\n \n    let pos = positions[vertex_index];\n    return vec4&lt;f32&gt;(pos, 0.0, 1.0);\n}\n \n// フラグメントシェーダ\n@fragment\nfn fs_main() -&gt; @location(0) vec4&lt;f32&gt; {\n    return vec4&lt;f32&gt;(1.0, 0.0, 0.0, 1.0); #FF0000FF\n}\n詳しくは別のドキュメントで説明する…\nリンク\n\nGitHub\n公式サイト\n"},"develop/Knowledge/libs/ライブラリ":{"slug":"develop/Knowledge/libs/ライブラリ","filePath":"develop/Knowledge/libs/ライブラリ.md","title":"ライブラリとは","links":["develop/Knowledge/libs/ui/GUIライブラリ","develop/Knowledge/lang/programming/Rust/crate"],"tags":["MOC"],"content":"ライブラリ（英: library）は、汎用性の高い複数のプログラムを再利用可能な形でひとまとまりにしたものである。実行可能な形式でない場合が多く、ソフトウェア開発の上で機能を拡張するものとして利用される。\nプログラムの集合ではあるが、その組み込むファイルがソースコードの場合や、オブジェクトコード、リンクライブラリのバイナリで提供される場合など、その方法は様々である。\nライブラリをプログラムに紐づけることを、リンクという。リンクの仕方として、動的リンクや静的リンクなどがある。\nサブセクション\n\nGUIライブラリ\n\n関連項目\n\ncrate\n"},"develop/Knowledge/platform/index":{"slug":"develop/Knowledge/platform/index","filePath":"develop/Knowledge/platform/_index.md","title":"プラットフォーム","links":[],"tags":[],"content":"開発のプラットフォームなど"},"develop/Knowledge/platform/graphics/webgpu/WebGPU":{"slug":"develop/Knowledge/platform/graphics/webgpu/WebGPU","filePath":"develop/Knowledge/platform/graphics/webgpu/WebGPU.md","title":"WebGPUについて","links":["develop/Knowledge/lang/programming/Rust/Rust","wgpu","develop/Knowledge/libs/ui/GUIライブラリ"],"tags":["グラフィック","GPU","Web"],"content":"概要\nWebGPUは、グラフィカル処理とGPGPUのための将来的な標準とAPIのためのワーキングネームである。「モダンな3D画像処理と計算機能」を提供することを目的としている。\nApple, Google, Microsoft, Mozillaを含むさまざまな組織のエンジニアが協力して、W3CのGPU for the Webコミュニティグループで開発される。\nVulkanやMetal、Direct3Dをラップするような形で、クロスプラットフォームに動作するAPIの提供を行う。\n実装・設計\n設計の中心となるヘッダーファイルはwebgpu.hで提供されている。これには関数や構造体などの「設計書」のみが定義されており、中身は別のライブラリに存在する。\nRust\nWebGPUの設計書に基づいて純粋なRustでそれを実装したものがwgpuだ。主にMozilla FirefoxやRustのGUIライブラリで使用されている。\nC++\nWebGPUをC++で実装したものが、WebGPU-C++やDawnである。特にDawnはGoogleによって開発されており、Google Chromeに搭載されている。\nブラウザの対応\nGoogle Chrome\nGoogle Chromeでは、バージョン113以上で正式にサポートされている。\n同じくMicrosoft Edgeもバージョン113以上で対応している。\nSafari\nSafariはMetalを通してWebGPUをサポートするが、現時点ではプレビュー版でサポートされている。\nまた、フラグでWebGPU = trueを設定することでプレビュー版でなくても使用できる。\nFirefox\nMozilla Firefoxは、残念ながらデフォルトではサポートされない。代わりにdom.webgpu.enabledフラグを有効化することでサポートされる。\nW3CにMozillaが参加しているので、じきに正式サポートされるはずだ。"},"develop/Knowledge/platform/graphics/webgpu/index":{"slug":"develop/Knowledge/platform/graphics/webgpu/index","filePath":"develop/Knowledge/platform/graphics/webgpu/_index.md","title":"WebGPU","links":[],"tags":[],"content":""},"develop/Knowledge/知識置き場":{"slug":"develop/Knowledge/知識置き場","filePath":"develop/Knowledge/知識置き場.md","title":"知識・データ置き場","links":["develop/Knowledge/libs/ライブラリ","develop/Knowledge/lang/エンジニアリングに関連する言語","develop/Knowledge/platform/プラットフォーム","AI"],"tags":["MOC"],"content":"ここは何？\n自分が持ち得る開発に関する知識のまとめです。\n大体アイデアとか用語集とかを置いてます。自己調達できるようにね。\nノートの内容について\nこのセクション内の記事の多くはWikipediaを参考に作成しています。また、Wikipediaの表現をそのまま流用している部分もあります。\nしかし、Wikipediaのライセンス上では、文章はCC BY-SA 4.0で公開されているため、コピーすることで著作権違反などには問われません。\nただし、クレジットがないのは違反なので、ここで明確にライセンスを決定します。\n出典: Wikipedia\nCC BY-SA 4.0に基づいて再配布。\nリンク\n\nライブラリ\nエンジニアリングに関連する言語\nプラットフォーム\nAI\n"},"develop/index":{"slug":"develop/index","filePath":"develop/_index.md","title":"開発","links":[],"tags":[],"content":""},"develop/projects/JourneyStreetMap/JSMの開発停止":{"slug":"develop/projects/JourneyStreetMap/JSMの開発停止","filePath":"develop/projects/JourneyStreetMap/JSMの開発停止.md","title":"JSM開発停止","links":["diary/2025-04/2025-04-28","develop/projects/JourneyStreetMap/JourneyStreetMap","私について","OGSP","推し活","やることリスト（すべて）"],"tags":[],"content":"本日(2025-04-28)をもちまして、JSMの開発を一時的に終了させていただきます。\n再開の目処は立っていません。\n理由\n今まで、JourneyStreetMap Projectは私(@yossy4411) の余暇を削って開発してきました。\nこのプロジェクトの開発に乗り出した理由から開発を続けられた理由まで、これらは私の『友達とのゲーム体験をもっと楽しいものにしたい』という思いからでした。\nですが、知っての通りOGSPの開発や受験勉強など、私にはやりたいこと・やらなければいけないことがたくさんあります。\nこれらを実現するためには、JSMの開発は早急に終える必要がありました。\nこのプロジェクトを始めた当初、開発は３週間ほどで終わらせるつもりでした。それが長引いて現在では２ヶ月間にスパンする形で食い込んでしまっています。\nこれを解決するためには、一度JSMの開発を諦め、やるべきことをこなすことに移行することが必要だと考えています。\n今後\n今後は、私はおかゆグループの開発に戻ります。\nOGSPの開発に加え、推し活系のいくつかのプロジェクトを進めていきます。\n現在のTODOについてはやることリスト（すべて）をご覧ください。"},"develop/projects/JourneyStreetMap/JourneyStreetMap":{"slug":"develop/projects/JourneyStreetMap/JourneyStreetMap","filePath":"develop/projects/JourneyStreetMap/JourneyStreetMap.md","title":"JourneyStreetMapとは","links":["develop/projects/JourneyStreetMap/JSMの開発停止","develop/Knowledge/lang/programming/Rust/Rust","develop/Knowledge/libs/ui/GUIライブラリ"],"tags":[],"content":"\n\n                  \n                  WARNING\n                  \n                \n\n\nこのプロジェクトは開発が停止しています。詳しくはこちら。\n\n\n\n仕組み\n1. JourneyMapのデータを読み込む\nまず、JourneyMapというのは、Minecraftでマップを表示するModです。\nこのModで保存されるワールドデータを抽出します。\n→Anvilファイルフォーマット、NBTデータ\n2. アプリ画面に表示\n\n適当にRustで組んどくかー\n\nうぇい。\n3. マップデータを編集\nアプリ画面上で道路とか地点を追加したりします。\nここにはGUIライブラリを使用するとやりやすいかもしれんね\n4. PMTilesにエクスポート\nPMTiles形式の１つのファイルにエクスポートすると使いやすいよね〜！\n5. GSIとして見る\n例えばGoogle Mapsみたいなサービスのように、マイクラの地図も見られるように編集可能だったりします。"},"develop/projects/JourneyStreetMap/index":{"slug":"develop/projects/JourneyStreetMap/index","filePath":"develop/projects/JourneyStreetMap/_index.md","title":"JourneyStreetMap","links":[],"tags":[],"content":""},"develop/projects/index":{"slug":"develop/projects/index","filePath":"develop/projects/_index.md","title":"プロジェクト","links":[],"tags":[],"content":""},"diary/2025-04/2025-04-03":{"slug":"diary/2025-04/2025-04-03","filePath":"diary/2025-04/2025-04-03.md","title":"2025年04月03日(木)","links":["favorite/おかゆのサブ","favorite/STPR/すとふぇす詐欺垢","develop/projects/JourneyStreetMap/icedのCanvasとWidgetの使い分け"],"tags":[],"content":"今日の作業\n\nJourneyStreetMapの開発\nYouTube 動画投稿 @おかゆのサブ「STAR to STPRのボーカルを際立たせてみた」 shorts及び長尺\nXの怪しいアカウントのURLの調査\nXのスクショの自動化\n\nJourneyStreetMapの開発\n主な変更\n\nJourneyMapViewerをCanvasからWidgetに変更\nマウスハンドラの追加\n\nXのスクショを自動化しようと思った\nいわゆるスクレイピングってやつです。\nPythonでやるのも難しそうだし、そもそも需要がなさそうだったのでやめました。\n手動でスクショ撮ってたほうが良いです。絶対に。"},"diary/2025-04/2025-04-04":{"slug":"diary/2025-04/2025-04-04","filePath":"diary/2025-04/2025-04-04.md","title":"2025年04月04日(金)","links":[],"tags":[],"content":"今日の作業\n\nノート整理\nWeb版のノートを作る\n\n82 Contributions!?\n"},"diary/2025-04/2025-04-05":{"slug":"diary/2025-04/2025-04-05","filePath":"diary/2025-04/2025-04-05.md","title":"2025年04月05日(土)","links":[],"tags":["Web","ブログ"],"content":"今日の作業\nWeb版ノートの機能性向上\nこれには以下のものを含みます。\n\nトップページの追加\n左サイドのメニューの追加\nソーシャルアイコンの追加\n\n\nBuy Me a Coffeeの登録\nまず銀行口座が要るらしい。\n親に頼もうトホホギス"},"diary/2025-04/2025-04-06":{"slug":"diary/2025-04/2025-04-06","filePath":"diary/2025-04/2025-04-06.md","title":"2025年04月06日(日)","links":[],"tags":[],"content":"今日の作業\nWeb版ノートのデプロイ\nGitHub Actionsで自動でビルドとデプロイを行えるようにした。\n自動化むずかった。\n詰まったポイント1\nsubtree pullで色々あった\n$ git subtree pull --prefix=content github.com/yossy4411/note.git\nこれで解決すると思いきや、分岐の原点が違うよって言われるので\ngit@github.com:yossy4411/note.gitにすると今度permission denied (publickey)って言われるのでもう嫌になりました。\n- uses: bisontransport/git-subtree-action@v1  \n  with:  \n    pat: ${{ secrets.GH_TOKEN }}  \n    repo: github.com/yossy4411/note.git  \n  \n    action: pull  \n    prefix: content  \n    message: &quot;Update note subtree&quot;\n\nこうすればエラーが無視されるし記述が簡単になって楽\n※エラーの根本的な解消にはなってない\n\nこれを修正するために、まずcheckoutを次のように変更します。\n  - name: Checkout repository  \n    uses: actions/checkout@v4  \n    with:  \n      token: ${{ secrets.GITHUB_TOKEN }}  \n+     fetch-depth: 0\nこうすることでブランチ全体のfetchができ、原点を検出できます。\n詰まったポイント2\n```yaml\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  if: github.ref == &#039;refs/heads/main&#039;  \n  with:  \n    github_token: ${{ secrets.GITHUB_TOKEN }}  \n    publish_dir: ./public  \n    publish_branch: gh-pages\n\n\n実は リポジトリ設定＞ActionsからBotにRead/Writeの権限を持たせないといけなかったりする\n"},"diary/2025-04/2025-04-07":{"slug":"diary/2025-04/2025-04-07","filePath":"diary/2025-04/2025-04-07.md","title":"2025年04月07日(月)","links":["favorite/おかゆのサブ"],"tags":[],"content":"今日の作業\nshort動画制作 - We Are STPR\n【全員集合】“すとふぇす”ドーム5DAYS終了！ライブ会場から緊急配信しますWWWWW【すとぷり/騎士A/AMPTAK/めておら/すにすて】より切り抜き\n@おかゆのサブ\n10時半頃に投稿したところ全然伸びなかったので、悔しくて音声・イラスト・効果音を再修整してもう一度投稿しました。（いつかこれが黒歴史になるんだろうなぁ）\n↑でもこれも学びだと捉えましょう！\nWeb版ノートの自動更新がうまく行ってるか確認した\n→yossy4411/note-web #27うまく行ってました！良かった〜\n今日はUp to dateで良かったとして、そのうちコンフリクト起こしてマージできないって怒られそうだけど大丈夫かな。\nノートの整理\nyossy4411.okayugroup.net/開発\nURLエンコード後\n→yossy4411.okayugroup.net/%E9%96%8B%E7%99%BA/\nああ、なんとも分かりづらい。URLに日本語を含むのは好ましくないですねぇ。\n---\ntitle: # タイトル\ndescription: # 説明\ntags: # タグ\nslug: # ここにURLパスを書く\n---\n \n## 内容\n内容\nそんなときはslugを使えば、ファイル名は日本語のままURLを英語に書き換えれてイイヨ👍️"},"diary/2025-04/2025-04-08":{"slug":"diary/2025-04/2025-04-08","filePath":"diary/2025-04/2025-04-08.md","title":"2025年04月08日(火)","links":["OGSP","okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention","okayugroup/OGSP/previous/EarthQuake/EarthQuake.desktop","wgpu","develop/Knowledge/platform/graphics/webgpu/WebGPU","diary/2025-04/2025-04-07"],"tags":[],"content":"今日の作業\nノートの情報追加\nこれらに情報を書き加えました。\n\nOGSP\nOGSP Disaster Prevention\nEarthQuake.desktop\nwgpu\nWebGPU\n\nノートのリンクを修正\n().md形式のリンクはObsidianで一般的に使用されますが、これはHugoでは使えません。\n36ee4663 `.mdで終わるリンクを正しく解釈できるように修正`\nリンクから”.md”を消去することで解釈できるようにしました。\nノートのディレクトリ名を変更\nURLに日本語を含むのはよくないという判断に基づき、ディレクトリ自体にも名前の変更を加えました。\nもともと_index.mdにslugを加えることで対処できるものだと思っていたのですが、それでは対応できなかったようです。名前自体を変更することで対処します。\nMOC（まとめノート）をつける\nグラフをわかりやすくするため。\n明日から学校！\nついに明日から3年生となります。\n宿題をやりましょう。\n（やってなかったんかい）\n歴史だけまじで苦手すぎる。他95%ぐらい解けてても社会だけ20％とかでマジでまずい、、\n今後このノートに勉強系も追加する可能性もなきにしもアラブ首長国連邦。\n特に江戸時代ね。世界史・地理は多分行ける。\n広告審査が通った話\n\n長かった。本当に長かった。\nあとはここから\nイ ン プ レ 数 を 伸 ば す だ け で す ね 。\n↑実質一番つらいのはこれ\n\nガチで稼いでる感ハンパねぇｗｗｗ"},"diary/2025-04/2025-04-09":{"slug":"diary/2025-04/2025-04-09","filePath":"diary/2025-04/2025-04-09.md","title":"2025年04月09日(水)","links":["diary/2025-04/2025-04-08","develop/projects/JourneyStreetMap/JourneyStreetMap","OGSP","iced","STPR","develop/Knowledge/lang/programming/ガベージコレクション"],"tags":[],"content":"今日の作業\nノート整理\n昨日の続きです。\n\nJourneyStreetMap\nOGSP\niced\nSTPR\nGC\nのまとめノートを整理しました。\n\njourneystreetmapの制作\nicedのカスタムウィジェットと他のウィジェットをつなげる部分の開発\n分かったこととしては、\n\nview関数内では&amp;selfしか引数に与えられないため、その中で操作するウィジェットはApplicationのメンバーにアクセスできず、イミュータブルである。\nもし書き換える必要があるならば、カスタムウィジェットにイベントハンドラを追加してMessageを割り当て、update関数でメンバーの変数を書き換えることができる。\nupdate関数が呼び出されたあとには、アプリケーションのウィジェットはすべて破棄されてもう一度view関数が呼ばれ、再宣言される。\n\n宣言型・関数型なのだ。\nつまり、icedはあまりこういうアプリには向いていないと言える。\n選択肢としては…\n\negui\nDruid\nDioxus ←試験段階らしい、Reactライクだとかなんとか\n"},"diary/2025-04/2025-04-10":{"slug":"diary/2025-04/2025-04-10","filePath":"diary/2025-04/2025-04-10.md","title":"2025年04月10日(木)","links":["develop/projects/JourneyStreetMap/JourneyStreetMap","diary/2025-04/2025-04-09","iced","wgpu"],"tags":[],"content":"今日の作業\njourneystreetmapをeguiに移植\n昨日分かったことなのですが、icedでは少し融通がきかないなというわけでeguiに移植したいと思います。\n普通にImageをui.putして良いパフォーマンスが得られたら良いんですがね、そう上手くはいかなそうです。\nもし別の方法を考える必要があった場合は、wgpuで直接描画を行うなど、プリミティブなやり方を取ります。"},"diary/2025-04/2025-04-11":{"slug":"diary/2025-04/2025-04-11","filePath":"diary/2025-04/2025-04-11.md","title":"2025年04月11日(金)","links":["私について"],"tags":[],"content":"ノートの不具合\n例えば私について.md)は yossy4411.okayugroup.net/about-me/ に配信されますが、これによって不具合が発生することがあります。\n相対パスが合わないという問題です。\n例えば先程の私について.mdで./a.mdを指した場合、Obsidianでは同じディレクトリのa (/a.md)がリンクされるのですが、Web版で見た場合にyossy4411.okayugroup.net/about-me/aが対象になってしまい、404になるという問題があります。\nこれを修正するために、以下の対処法が考えられます。\n\nMarkdownファイルですべてのリンクを絶対パス指定にする\nHugoでリンクの接頭辞に../をつける\nHugoで、ファイルをディレクトリ(https://&lt;domain&gt;/path/to/dest/%1)分けするのではなく%1.htmlとして扱い、.mdを.htmlに置換\n\n今日の作業\nノートのURLをuglyとして扱う\nノートの不具合でも説明した通り、正しいURLが指定されないバグがあります。\nこれを修正するために作業を致しました。\nファイル名が一致しないファイルにエイリアスを追加しました。"},"diary/2025-04/2025-04-12":{"slug":"diary/2025-04/2025-04-12","filePath":"diary/2025-04/2025-04-12.md","title":"2025年04月12日(土)","links":["diary/2025-04/2025-04-11","develop/projects/JourneyStreetMap/JourneyStreetMap"],"tags":[],"content":"Web版ノートの不具合について 第二弾\nノートの不具合の続きになりますが、前回は「aliasesにファイル名を載せることで、リダイレクトによって正しいパスを指定できる。1」という術を使いましたよね。\nよく考えたらこれでもだめな説が出てきました。\n問題が発生するのはノートのセクション一覧です。\n一覧でその中身のページを表示すると、相対リンクが１つづれてしまうという問題があります。\nこれでは、リンクを絶対パスで指定しない限り、正しく判別できません。\nこれを解消するために、「スクリプトを作ってすべてのMarkdownファイルを置換する」という方法が考えられます。\n今日の作業\nJourneyStreetMap\n毎度のこと、JourneyStreetMapです。\n飽きて途中でやめました(; ;)\nノートの不具合を修正\nObsidianのMarkdownを普通のMarkdownに書き換えるためのスクリプトを作成。\n↪replace_markdown.py\nノートの名前整理\n不具合修正により、冗長なaliasesは必要なくなりました。\nFootnotes\n\n\nノートのURLをuglyとして扱う ↩\n\n\n"},"diary/2025-04/2025-04-13":{"slug":"diary/2025-04/2025-04-13","filePath":"diary/2025-04/2025-04-13.md","title":"2025年04月13日(日)","links":["develop/projects/JourneyStreetMap/JourneyStreetMap","develop/Knowledge/lang/programming/Rust/Rust","develop/Knowledge/platform/graphics/webgpu/WebGPU","tags/shorts","推し活"],"tags":["shorts"],"content":"今日の作業\nJourneyStreetMapのカメラ操作等\nいつもどおりJourneyStreetMapの開発ですが、マップのパンとズームを実装していきます。\nそういうことです。\n動画制作\nメインチャンネルのShortsを投稿したい\n↑できなさそう\n春休み中にできなかった4つのこと\n1. JourneyStreetMapのリリース\nまあ分かってたけれども。\nRustやWebGPUの勉強など、ちょっと難航しすぎたかもしれない。\n普通に別のプラットフォーム使っとけば良かった。\n疲れてます。\nここ1週間のうちに完成できるように頑張りたい！\n2. メインチャンネルの動画投稿\nこれに関してはいくつかアイデアはありました。その動画を作る時間がなかったのです。\n思いついていたアイデア集\n\n3年間タイピングやってみた結果ｗｗ shorts\n緊急地震速報について\n地震計作ってみた\n\nいつ作るか？ → 4月中にどれか1つは作りたい。\n3. スマホの背景を推しだらけに\n推し活\nAndroidのLive Wallpaper APIというものを知ったのが2024年11月。このアイデアを思いついたのは12月。それからずっと溜め込んでいたので、そろそろ解消したいと思って。\n結局無理だったけど。\nスマホの加速度・ジャイロセンサを使ってぬいとかを動かせるやつが作りたいっていう願望を叶えてくれる人はいませんか。\n\n\n                  \n                  TIP\n                  \n                \n\n\n居ないから自作するんよね\n\n\n\n4. 歌い手ポータルサイトの開発スタート\nリポジトリだけ作って\n体調\n今日から毎日体調について書こうと思います。\nグラフ化したらめっちゃオモロそう\n今日は天気痛のせいで頭痛がしました。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気, 頭痛就寝24:05起床6:30朝食8:45天気痛true"},"diary/2025-04/2025-04-14":{"slug":"diary/2025-04/2025-04-14","filePath":"diary/2025-04/2025-04-14.md","title":"2025年04月14日(月)","links":["develop/projects/JourneyStreetMap/JourneyStreetMap"],"tags":[],"content":"体調\nバチクソ眠いっす\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気,眠気就寝24:40起床6:50朝食7:40天気痛false\n今日の作業\nJourneyStreetMapを並行処理にしようとした\nJSMのマップ読み込みを、tokioによる並行処理にしてみませんか。ということについてです。\nその利点は、読み込みの高速化ができる点です。\n\n\n                  \n                  NOTE\n                  \n                \n\n\nまあ失敗したんですけどね\n\n\n\n並行処理って、メンバーをlockできるようにしないといけなかったり、色々めんどくさいんです。\n挙げ句の果てに、使っていたmacroquadのTexture2Dの生成はメインスレッドじゃないといけないわけです。\nむっずっず、やっぱやーめた\nJourneyStreetMapにグリッドを追加\n\nバグだらけだし、見づらいし、横線に至っては実装できてない。\nすぐ直せるんだけど、もう眠いしやめます。"},"diary/2025-04/2025-04-15":{"slug":"diary/2025-04/2025-04-15","filePath":"diary/2025-04/2025-04-15.md","title":"2025年04月15日(火)","links":["develop/projects/JourneyStreetMap/JourneyStreetMap"],"tags":[],"content":"今月も半分が過ぎました\n４月って変化が大きいですよね。私は中３になりました。\nというか、変更量が多いですよね。数万コミットぐらいしたいところですが、これが１ヶ月の間に起こって良いのか、という感じですよね。\n何を言っているのですか？\n今日の体調\n目覚めが悪かった。２度寝した。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:20起床6:35朝食6:50天気痛false\n今日まじ寒かったよな？自転車漕いでて凍えそうなったで\n\n12℃、そりゃ寒いわ\n今日の作業\nJSMの開発\nいつもどおり。本当に最近はこれ一強です。なんかマイクラワールドで鉄道を作るらしく、それにぴったりな設計にしたいですよね。（またタスクが増えた）\n\nどうです？グリッドを調整したんですよ。褒めてくれ。"},"diary/2025-04/2025-04-16":{"slug":"diary/2025-04/2025-04-16","filePath":"diary/2025-04/2025-04-16.md","title":"2025年04月16日(水)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:00起床6:40朝食6:50天気痛false\n今日の作業\nブログを書きましょう\nそろそろブログを書かないと行けない時期になってきています。\nということで、私のタイピングの成長録みたいな感じのをDraftで書いておきました！\n数日後には上がります。\nあと再来週ぐらいにこれのShortsを上げます。\n来週がダメな理由は来週月曜がテストだからです。\nもりうさプロジェクトに参加してみよう\nWeb3についての学習の一環として、そして推し活の1つの手段として、もりうさのコミュニティに入ってみました。\n凄いです。STPRはNFTとかの発行も行っているようです。\nてかNFTって何？？\n→いつかまとめようと思います。"},"diary/2025-04/2025-04-17":{"slug":"diary/2025-04/2025-04-17","filePath":"diary/2025-04/2025-04-17.md","title":"2025年04月17日(木)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:20起床6:20朝食6:40天気痛false\n柏原真人さんのWeb3の話\nX Spaceにて、柏原真人ことななもり。さんから、Web3のお話をさせていただきました。\n実際にNFTなどの事業を行っている人からの話は貴重です。\nみなさんも聴いてみるべし（こちらに録音が残っています）\n今日の作業\n特になし。Web3の話を聴いていたらそれだけで満足してしまった。"},"diary/2025-04/2025-04-18":{"slug":"diary/2025-04/2025-04-18","filePath":"diary/2025-04/2025-04-18.md","title":"2025年04月18日(金)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:20起床6:40朝食6:50天気痛false\n今日の作業\neguiとBevyの統合\n難しい眠いIME対応してくれ眠い\nタブレットにDebian入れた\nisoから普通にインストール。\nログインできなくなった。ごみかす\n月曜に公開テストがある件について\n社会のお勉強をしましょう"},"diary/2025-04/2025-04-19":{"slug":"diary/2025-04/2025-04-19","filePath":"diary/2025-04/2025-04-19.md","title":"2025年04月19日(土)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:20起床6:15朝食7:20天気痛false\nテスト勉強\n月曜に実力テストがありますし、受験生ですし。\nこのノートを有効活用していきます！\nObsidian最強なんだわ\n\n\n                  \n                  NOTE\n                  \n                \n\n\n中3の知識をできる限りすべてばらまいていきたいと思います\n\n\n\n掲載予定の教科一覧\n\n歴史\n国語\n数学（計算方法）\n理科\n地理\n英語（文法のみ）\n\n今日の作業\n勉強のため一旦ストップ。"},"diary/2025-04/2025-04-20":{"slug":"diary/2025-04/2025-04-20","filePath":"diary/2025-04/2025-04-20.md","title":"2025年04月20日(日)","links":[],"tags":[],"content":"今日の体調\n普通に疲れてたんやと思う。めっちゃ寝た気がする。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:30起床7:00朝食8:30天気痛false\n今日の作業\nテスト勉強\n疲れた。疲れたけど勉強はしなければいけないよね。\nというわけで一旦ノートを取らず教科書で勉強します。\n受験まではまだ長いから大丈夫！\nノート整理\n一旦この辺りでノートを整理します。\n主にタスク管理です。"},"diary/2025-04/2025-04-21":{"slug":"diary/2025-04/2025-04-21","filePath":"diary/2025-04/2025-04-21.md","title":"2025年04月21日(月)","links":[],"tags":[],"content":"今日の体調\n眠かった。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:10起床6:30朝食6:50天気痛false\n今日の作業\n何だこれ！！！\n「俺のこと静的に見てる人いいね見た人もやる」\n\n一応解説しておくと、サーバー側に存在するHTMLファイルは多くの場合に静的です。\nはよアプリつくれ\n受験生なんだからタスクは早めに終わらせておけ。"},"diary/2025-04/2025-04-22":{"slug":"diary/2025-04/2025-04-22","filePath":"diary/2025-04/2025-04-22.md","title":"2025年04月22日(火)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:25朝食6:50天気痛false\n今日の作業\nJourneyStreetMapの開発\neguiで日本語入力をできるようにすることに総動員（１００％俺）で取り組んでおります。"},"diary/2025-04/2025-04-23":{"slug":"diary/2025-04/2025-04-23","filePath":"diary/2025-04/2025-04-23.md","title":"2025年04月23日(水)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\n今日の作業\nNVIDIAプロプライエタリドライバの話\n多分、X11だとWaylandと比較して圧倒的にパフォーマンスが落ちるんですよ。\nで、次にGPUはWaylandと相性が悪い（要検証）んです。\n具体的に、WaylandセッションではGPUがFall offします。つまり、論理的にGPUへのアクセスが遮断されるというバグが存在しています。\nこれを修正するため、いくつかの検証を実施します。GPUの操作がFall offに与える影響についての検証です。\nとは言いましても、GPUのFall offのトリガーが何なのかは全くわかりません。唯一分かっていることは、この問題はOptimusでUEFIからdiscrete GPUに切り替えたときに発生するということだけです。"},"diary/2025-04/2025-04-24":{"slug":"diary/2025-04/2025-04-24","filePath":"diary/2025-04/2025-04-24.md","title":"2025年04月24日(木)","links":["develop/projects/JourneyStreetMap/JourneyStreetMap"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:30起床6:40朝食6:50天気痛false\n今日の作業\nだんだんここが適当になってしまっています。\nなぜなら、私は眠いからです。\nこれを書く頃にはもう10時を回っており、書くための気力が全く沸かないわけです。\n\nJSMの開発で軽量化を行いました。\nHyprlandをメインPCに導入しました。\n"},"diary/2025-04/2025-04-25":{"slug":"diary/2025-04/2025-04-25","filePath":"diary/2025-04/2025-04-25.md","title":"2025年04月25日(金)","links":["develop/projects/JourneyStreetMap/JourneyStreetMap"],"tags":[],"content":"今日の体調\n元気だけどなんかイライラした\nうん、なんで？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:30起床6:40朝食6:52天気痛false\n今日の作業\nJSM\nJSMでいくつかの進展がありました。\n\n日本語入力の対応\nBevyにDefaultPluginsを使用しない方法を編み出す（軽量化）\n\n日本語入力への対応は、window.enable_ime = trueで実現可能でした。"},"diary/2025-04/2025-04-28":{"slug":"diary/2025-04/2025-04-28","filePath":"diary/2025-04/2025-04-28.md","title":"2025年04月28日(月)","links":["develop/projects/JourneyStreetMap/JourneyStreetMap","develop/projects/JourneyStreetMap/JSMの開発停止"],"tags":[],"content":"一昨日(4/26)と昨日(27)で日記が取れませんでした。いそがしかったのです。ゴメンナサイ。\n今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\n今日の作業\nJSM 開発停止\n本日をもちまして、JourneyStreetMapの開発を一時終了とさせていただきます。理由としては、\n\nタスクがたまりすぎている\n実現の難しさが露呈されてきた\n\nの２点です。詳しくはJSMの開発停止をご覧ください。"},"diary/2025-04/2025-04-29":{"slug":"diary/2025-04/2025-04-29","filePath":"diary/2025-04/2025-04-29.md","title":"2025年04月29日(火)","links":["develop/Knowledge/internet/application/http/HTTP","OGSP"],"tags":[],"content":"今日の体調\nやる気ゴリゴリ削がれました\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:50起床6:10朝食6:50天気痛true\n今日の作業\n動画編集ソフトの設計\nChatGPTと協力して良い感じに編集ソフトを作ります。\n別のドキュメントを用意する予定です。\nOGSP Server Nodeの設計と実装\n既存のogsp-serverにWeb3のP2P設計と3を実装したOGSP Server Nodeを作成します。\nこちらも今後ドキュメントを作成していきます。\n地震計の設計の変更を検討\nOGSPでは、地震計の開発も並行して進めています。これをRustで作るべきかPlatformIOの現存にすべきか、という疑問があります。\nバイナリサイズで比較すると絶対にPlatformIOが勝っているのですが、安全性と将来性をとるとRustでも良いんですよね。\n一回作ってみてどんな感じなのか調べてみます。"},"diary/2025-04/2025-04-30":{"slug":"diary/2025-04/2025-04-30","filePath":"diary/2025-04/2025-04-30.md","title":"2025年04月30日(水)","links":["develop/Knowledge/internet/transport/tcp/TCP","develop/Knowledge/internet/transport/udp/UDP","develop/Knowledge/internet/transport/quic/QUIC","develop/Knowledge/internet/application/http/HTTP"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:20起床6:40朝食6:55天気痛false\n今日の作業\n主にノート整理です。\nTCP, UDP, QUIC, HTTPなどを書きました。"},"diary/2025-04/2025-04":{"slug":"diary/2025-04/2025-04","filePath":"diary/2025-04/2025-04.md","title":"2025年4月","links":["diary/2025-04/2025-04-30","diary/2025-04/2025-04-29","diary/2025-04/2025-04-28","diary/2025-04/2025-04-25","diary/2025-04/2025-04-24","diary/2025-04/2025-04-23","diary/2025-04/2025-04-22","diary/2025-04/2025-04-21","diary/2025-04/2025-04-20","diary/2025-04/2025-04-19","diary/2025-04/2025-04-18","diary/2025-04/2025-04-17","diary/2025-04/2025-04-16","diary/2025-04/2025-04-15","diary/2025-04/2025-04-14","diary/2025-04/2025-04-13","diary/2025-04/2025-04-12","diary/2025-04/2025-04-11","diary/2025-04/2025-04-10","diary/2025-04/2025-04-09","diary/2025-04/2025-04-08","diary/2025-04/2025-04-07","diary/2025-04/2025-04-06","diary/2025-04/2025-04-05","diary/2025-04/2025-04-04","diary/2025-04/2025-04-03","develop/projects/JourneyStreetMap/JourneyStreetMap","develop/projects/JourneyStreetMap/JSMの開発停止"],"tags":["MOC"],"content":"日記\n\n2025-04-30\n2025-04-29\n2025-04-28\n2025-04-26,27はありません。\n2025-04-25\n2025-04-24\n2025-04-23\n2025-04-22\n2025-04-21\n2025-04-20\n2025-04-19\n2025-04-18\n2025-04-17\n2025-04-16\n2025-04-15\n2025-04-14\n2025-04-13\n2025-04-12\n2025-04-11\n2025-04-10\n2025-04-09\n2025-04-08\n2025-04-07\n2025-04-06\n2025-04-05\n2025-04-04\n2025-04-03\n\n今月のまとめ\n\nノートの作成\nJSMの開発\nJSMの開発停止\n\n今月のニュース\n国内\n\n大阪・関西万博の開幕 (4/13)\n行ってきましたが、めっちゃ面白かったです。今度ブログを書こうと思います。\nさて、これは2.9兆円の経済効果を目指しており、日本のライフサイエンスや持続可能な社会の実現への一歩を踏み出すこととなります。\n新年度予算が成立\n予算内で、社会保障費が過去最大を更新しました。これは、高齢化と医療福祉の強化によるものだと考えられます。\n10万円の商品券配布\n結局のところ、国民からの「バラマキ疑惑」の意見が多く寄せられたため、石破首相が謝罪し中止となりました。\nApple Intelligenceが日本語に対応し、iPhoneでも利用可能に\nこれは、Appleが開発したAIで、スマホ上でローカルに動作します。プライバシーを保護しながら、ユーザーの高度なタスクに柔軟に対応するなどのUXの向上が期待されています。\n百日せきの患者数が4100人に達した\nこれは、去年1年間の患者数を上回っており、4月20日時点でも増加傾向が続いています。\n\n国外\n\nトランプ関税の発動 (4/2)\nアメリカのトランプ大統領が多くの国に対して包括的な貿易関税を課し、全輸入品に10%の基準関税を導入しました。これは国際貿易に大きな影響を及ぼし、特に中国やEUとの関係に緊張を生じさせました。\n市場の反応は大きく、株価の変動とドル安が起こりました。\nフランシスコ法王の逝去とコンクラーヴェの発表 (4/21)\nフランシスコ法王が88歳で逝去し、5月7日から新法王を選出するためのコンクラーヴェが開催されることが発表されました。これはカトリック教会の未来に大きな影響を与える出来事で、世界中の信者から注目を集めました。\nスペインとポルトガルの大規模停電（4月28日）\nスペインとポルトガルで大規模な停電が発生し、鉄道の遅延など交通機関に影響が出ました。これは大型連休中の観光客にも影響を与え、日本人観光客の混乱が報じられました。\nガザの人道支援危機\nガザでは人道支援活動が制限され、暴力の激化と人道ニーズの急増により、状況が危機的になっています（4月26日）。これは国際社会の対応を求める声が高まっています。\nベネズエラの石油輸出制限\nトランプ大統領がベネズエラの石油輸出をさらに制限する制裁を命じ、同国の経済に打撃を与えました（4月25日）。これは地政学的緊張を高める要因となりました。\n"},"diary/2025-04/index":{"slug":"diary/2025-04/index","filePath":"diary/2025-04/_index.md","title":"2025年4月","links":[],"tags":[],"content":""},"diary/2025-05/2025-05-01":{"slug":"diary/2025-05/2025-05-01","filePath":"diary/2025-05/2025-05-01.md","title":"2025年05月01日(木)","links":["develop/Knowledge/internet/web/1/Web1.0","develop/Knowledge/internet/web/2/Web2.0"],"tags":[],"content":"今日の体調\n授業中寝とるわ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:00起床6:40朝食6:50天気痛false\n今日の作業\nWeb系を書く\nWeb1.0とかWeb2について書きました。"},"diary/2025-05/2025-05-02":{"slug":"diary/2025-05/2025-05-02","filePath":"diary/2025-05/2025-05-02.md","title":"2025年05月02日(金)","links":["okayugroup/OGSP/server/OGSP-Server-Node"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:30朝食6:50天気痛false\n今日の作業\nOGSP Server Nodeとか\nOGSP Server Nodeにて、ドキュメントを用意するんやで\nメモ\nそういえば、この頃全体的に「〜だ。」の口調でWikiっぽく書いてるんですけど、「〜です。」「〜ます。」とか「〜だよ」でカジュアルに攻めってったほうが良いんかな？と思いまして。\nまあでも一番書きやすくて、論文とかにするときも使い勝手が良いので「〜だ。」で良いと思うんですけどね。コメントよろ。"},"diary/2025-05/2025-05-03":{"slug":"diary/2025-05/2025-05-03","filePath":"diary/2025-05/2025-05-03.md","title":"2025年05月03日(土)","links":[],"tags":[],"content":"今日の体調\n朝が早い\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:20朝食6:30天気痛false\n今日の作業\nブログ投稿\n超低スペPCにはungoogled-chromiumが良いぞ\nungoogled-chromiumが良いよ！うわあああああ（？）\nタブレットの性能が低すぎてFirefoxさえまともに動かないので困ってたらungoogled chromiumに出会ったのですが、これが結構上手くいったっていう話。\n地震計クライアントのRust実装\nRustのほうが学習曲線が緩やか（自分にとっては）なので、C++ではなくRustで実装していきます。意外と単純なんですよね。"},"diary/2025-05/2025-05-04":{"slug":"diary/2025-05/2025-05-04","filePath":"diary/2025-05/2025-05-04.md","title":"2025年05月04日(日)","links":["okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床5:30朝食6:00天気痛false\n石川に居ます\n作業は一旦停止と思いきや、色々とやりたいことをまとめたりしています。\n\nOGSP Disaster Preventionの新しい設計を定義しています。\n新しい編集ソフト「空織」を設計し始めました。\n"},"diary/2025-05/2025-05-06":{"slug":"diary/2025-05/2025-05-06","filePath":"diary/2025-05/2025-05-06.md","title":"2025年05月06日(火)","links":[],"tags":[],"content":"今日の体調\n能登から帰るのに8時間ぐらいかかってしまった\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:45起床6:30朝食6:50天気痛false"},"diary/2025-05/2025-05-07":{"slug":"diary/2025-05/2025-05-07","filePath":"diary/2025-05/2025-05-07.md","title":"2025年05月07日(水)","links":[],"tags":[],"content":"今日の体調\n副鼻腔炎になりました☆\n喉が痛い感じ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:40起床6:30朝食6:50天気痛false\n今日の作業\n地震計開発\nasyncを使ってADCの読み取りがやりたかったんだけど、ちょっとまだ難しいかなって感じです。\n並行して効率良く読むってのがなかなか難しいんですよ。どうすればいいでしょう。\njoin!でも無理でした。明日考えます。"},"diary/2025-05/2025-05-08":{"slug":"diary/2025-05/2025-05-08","filePath":"diary/2025-05/2025-05-08.md","title":"2025年05月08日(木)","links":[],"tags":[],"content":"今日の体調\n寝る時間が遅すぎる\n不健康\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:00起床6:45朝食6:55天気痛false\n今日の作業\n地震計の開発\nとりあえずasyncで加速度の取得ができるようになった\nOneshotモードが結局一番効率よくて確実なんですわ"},"diary/2025-05/2025-05-09":{"slug":"diary/2025-05/2025-05-09","filePath":"diary/2025-05/2025-05-09.md","title":"2025年05月09日(金)","links":[],"tags":[],"content":"今日の体調\n最近寝るの遅すぎ 授業中に寝ようとすんなよ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:00起床6:45朝食6:55天気痛false\n今日の作業\nノートの活用\nこのノートを活用する時が来たかもしれん\nといっても、Obsidianって万能なんです\n国語とかはノートとして使えばいいし\nしかも\\frac{1}{x}\\sqrt{x} = x^{-\\frac{1}{2}} みたいな式も書けるんですよ\n応用すれば\\ce{H2O}（水）とか\\ce{SO4^{2-}}（硫酸塩）みたいに化学式も書けちゃうんですよ\nリンク機能とかも上手く活用すれば知識ノートとしてじゅうぶんに利用できるレベル！\nさて、授業内容とかをこのノートにちゃっとまとめてしまえば、全国の同級生の勉強に役立つかもしれないじゃないですか\nウェブ上でどこでも見れるようになってるじゃないですか\n\nこれを見越してたちょっと前の俺天才すぎるやろ\n"},"diary/2025-05/2025-05-10":{"slug":"diary/2025-05/2025-05-10","filePath":"diary/2025-05/2025-05-10.md","title":"2025年05月10日(土)","links":["diary/2025-05/2025-05-09","okayugroup/OGSP/sensor/seismometer/OGSP-Seismometer"],"tags":[],"content":"今日の体調\n春はあけぼの\n今日は雨\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:40起床6:50朝食6:50天気痛false\n今日の作業\n地震計の開発\n2025-05-09から引き続き地震計の開発を行ってます\n今日は震度の割り出しまで進みました。明日は送信をできたらいいけど、多分学校のノート整理とかやります。ありがとうございました。"},"diary/2025-05/2025-05-11":{"slug":"diary/2025-05/2025-05-11","filePath":"diary/2025-05/2025-05-11.md","title":"2025年05月11日(日)","links":["okayugroup/OGSP/sensor/seismometer/OGSP-Seismometer"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\n今日の作業\n地震計にBLEを実装してみる\nかなり時間がかかりましたが、ちゃんと動きました。BLEって電波弱いんですよ。受信機の近くに置いてないと難しい。\n地震計\nコード"},"diary/2025-05/2025-05-12":{"slug":"diary/2025-05/2025-05-12","filePath":"diary/2025-05/2025-05-12.md","title":"2025年05月12日(月)","links":["okayugroup/OGSP/sensor/seismometer/OGSP-Seismometer","develop/Knowledge/internet/transport/udp/UDP"],"tags":[],"content":"今日の体調\nはよ寝ろカスがよぉ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:20起床6:30朝食6:50天気痛false\n今日の作業\n地震計の開発\nついに！地震計にWi-Fi (Networking) を実装するところまで来ましたよ！UDPしか使うつもり無いですけど。\nそして、プログラムのサイズが肥大化してきております。やっぱりWi-Fi関連は重たいですね。\nフラッシュメモリ大きめにしてくれてありがとう。"},"diary/2025-05/2025-05-13":{"slug":"diary/2025-05/2025-05-13","filePath":"diary/2025-05/2025-05-13.md","title":"2025年05月13日(火)","links":["okayugroup/OGSP/sensor/seismometer/OGSP-Seismometer","develop/Knowledge/internet/protocol/IPアドレス"],"tags":[],"content":"今日の体調\n春暁だわ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:40朝食6:50天気痛false\n今日の作業\n地震計にUDPを実装したよ\n地震計には通信のライブラリとしてembassy-netとsmoltcpを使ってるんだけど、こいつらIPv4のDHCPには対応してた。でもIPv6には静的IPの指定しか対応してくれてないから、v6経由のサーバーには到達できないと思う。悲しい。"},"diary/2025-05/2025-05-14":{"slug":"diary/2025-05/2025-05-14","filePath":"diary/2025-05/2025-05-14.md","title":"2025年05月14日(水)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:30朝食6:50天気痛false\n長期休みに入るよ\nついこの前GWだったのに、春季大会の影響で私は木曜から日曜まで4日間休みになります。\nこの4日間でちょっと受験勉強と、動画編集アプリの作成を頑張っていきたいところですね。"},"diary/2025-05/2025-05-15":{"slug":"diary/2025-05/2025-05-15","filePath":"diary/2025-05/2025-05-15.md","title":"2025年05月15日(木)","links":[],"tags":[],"content":"今日の体調\n結構寝た気になった\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:30起床6:15朝食6:45天気痛false\n今日の作業\nOpenGLとVulkanの勉強\nskia-safeのバックエンドにグラフィックライブラリを仕込んでGPUレンダリングができると聞きつけてやってきました。OpenGLは結構簡単に書けるのですが、問題はVulkanです。\n今日は眠いので明日の俺に託す。\n\n\n                  \n                  TIP\n                  \n                \n\n\nちなみにVulkanはバルカンって読むらしい\nバルカン半島かな？\n\n\n"},"diary/2025-05/2025-05-16":{"slug":"diary/2025-05/2025-05-16","filePath":"diary/2025-05/2025-05-16.md","title":"2025年05月16日(金)","links":["okayugroup/OGSP/sensor/seismometer/OGSP-Seismometer","develop/Knowledge/lang/programming/プログラミングパラダイム","develop/Knowledge/platform/graphics/webgpu/WebGPU"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:40起床6:20朝食6:45天気痛false\n今日の作業\nVulkanの勉強\n正直OpenGLとVulanのパフォーマンスの違いが分かっていなかったので、まとめます。\nskia-safeを通して、可能な限り高頻度に1万個の円を描画します。\n中央値（体感）を抽出するとこんな感じです。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n経過時間 Vulkan [ms]経過時間 OpenGL [ms]行われた操作操作の働いた場所00開始0.1250.221クリアSKCanvas2.6192.471タスクの追加SKCanvas3.6432.642GPUへの同期Skia → GPU3.6819.705レンダリング(注１)GPU(注１): Vulkanでは並列処理でタスクをGPUに渡す操作を行う。\nなお、Vulkanは低レベルなため、再描画の度にSurfaceを作成する必要があります。その部分は除外しています1。\nOpenGLよりVulkanのほうが最終的なレンダリング時間が少ないように見えますが、これはVulkanが並列処理を扱うことが可能なためです。レンダリングが完了するまで待つようにすると、8msくらいになります。\n総合的にみればVulkanのほうがOpenGLより速いのですがね。\nドキュメントの設置\n\n地震計\nプログラミングパラダイム\nWebGPU\nこの辺りの追加・修正を行いました。\n\nFootnotes\n\n\nこの部分の時間を計測すると0.01msぐらいで、考慮しなくても良いくらいだと思います。 ↩\n\n\n"},"diary/2025-05/2025-05-17":{"slug":"diary/2025-05/2025-05-17","filePath":"diary/2025-05/2025-05-17.md","title":"2025年05月17日(土)","links":["okayugroup/OGSP/server/OGSP-Server-Node"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:20起床6:30朝食6:50天気痛false\n今日の作業\nサーバーのOSのを入れ替えるよ\n実は自宅にサーバーを1つ大きめのやつを置いてるんだけど、今までUbuntuで運用していたのをRocky Linuxに置きかえようと思うんよ。\nUbuntuって意外とメモリ消費する。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n合計使用中空き共有キャッシュ済み使用可能7.6 GB671 MB5.3 GB14 MB1.9 GB7.0GB\nまあそれでも5.3GBも空きあるんですけどね。\nさて、Rocky Linuxの紹介といきましょうか。\n\nRocky Linuxは、Redhat Enterprise互換のオープンソースLinux。CentOSがローリングリリースになったことへの、安定版の代替として作られた。\n安定性が非常に高く、10年間のLTSサポートがある。（10年！？）\n\nということで、OGSP Server Nodeとして稼働させるために入れてみようかな、っていう感じです。お試しだよ、お試し。"},"diary/2025-05/2025-05-18":{"slug":"diary/2025-05/2025-05-18","filePath":"diary/2025-05/2025-05-18.md","title":"2025年05月18日(日)","links":["okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\n今日の作業\nDisaster Preventionの開発\nOGSP Disaster Preventionで、Velloのレンダリング結果を渡せるように頑張りました！\n凄いよ、みてこれ\n\nええやろ？ええやろ！？\nこの真ん中の部分、GPUレンダリングなんよ！凄いやろ！？此処までたどり着くのに半日かかったよ。\n次は、GeoJSONからrkyv通してゼロコピーして、更にここにマップを表示します。お楽しみに。"},"diary/2025-05/2025-05-19":{"slug":"diary/2025-05/2025-05-19","filePath":"diary/2025-05/2025-05-19.md","title":"2025年05月19日(月)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:20起床6:40朝食6:50天気痛false\n今日の作業\nSlintでSkiaは触らせてくれないの？\nSlintで直接的に描画APIを触りたいんですよ。\nそれは、動画編集ソフトのプロジェクトです。\n結局見た感じではPathとかはslintファイル内で定義していて、skiaを直接さわるみたいなことは無理っぽいです。"},"diary/2025-05/2025-05-20":{"slug":"diary/2025-05/2025-05-20","filePath":"diary/2025-05/2025-05-20.md","title":"2025年05月20日(火)","links":["okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention","wgpu","iced"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:40朝食6:50天気痛false\n今日の作業\n地図データを作ろう\nOGSP Disaster Preventionの話です。\n本当は、単純化の機構なんて要らなかったんです。\nでも作りました。GitHub\nへへへええええ（脳内爆発）\nえへへえええ\n動画編集ソフト、UIライブラリどうする問題\nwgpuを使うためにはicedが一番無難な判断だなーって感じ。Slintに渡すためには一旦CPUバッファへのコピーが挟まるし、FlutterだとFFI通さないといけないし、eguiはCPU使用率が無視できないし、Tauri / Dioxusはそもそも違うし、C++使うのは本末転倒の事態。Druidは開発停止中、Xilemは開発初期段階すぎる。しかもXilemが使用するライブラリ「Vello」はトライアングレーション結果からの描画を直接的にサポートしない！\nどうするんや。"},"diary/2025-05/2025-05-21":{"slug":"diary/2025-05/2025-05-21","filePath":"diary/2025-05/2025-05-21.md","title":"2025年05月21日(水)","links":["diary/2025-05/2025-05-20","wgpu","iced"],"tags":[],"content":"今日の体調\nねもい パフォーマンス低下中\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:30起床6:30朝食6:50天気痛false\n今日の作業\nタブレットにはpostmarketを\nおれのたぶれっと、YouTubeさえ見れれば良いんだよ\nだからPostmarketOSのPlasma Mobileを使うんだよ\nなんでArchじゃないのって？めんどいからだよ。特にパーティションとかWi-Fiとかbaseのインストールとか。\n動画編集ソフトの設計\n動画編集ソフト、UIライブラリどうする問題の続き\n結局、マルチプラットフォームとパフォーマンスを同時に取るためには、wgpuとicedの構成がいちばん現実的。CUDAとかVulkanのRustバインドとかも考えたんだけど、それだと高レベルAPIなためにコード全体が十万行ぐらい（冗談抜きで）になって、保守性も開発効率も悪すぎる。\nちなみに、icedのUIフレームワークとしての性能はかなりしっかりしています。そもそもこれ自体wgpuをデフォルトのバックエンドとして採用していて、テクスチャ（wgpuでGPUで描画させる場所）の用意が簡単なんですよね。"},"diary/2025-05/2025-05-23":{"slug":"diary/2025-05/2025-05-23","filePath":"diary/2025-05/2025-05-23.md","title":"2025年05月23日(金)","links":[],"tags":[],"content":"今日の体調\nばりばり成長痛すぎる\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:30朝食6:50天気痛false\n今日の作業\n地図を作りたい\nああああああああああなんで描画できないんだよおお\nというわけで、コストが大きすぎると描画できないみたいです。GPUメモリの不足なのか何なのか…\n昨日の日記について\n単純に忘れてる"},"diary/2025-05/2025-05-24":{"slug":"diary/2025-05/2025-05-24","filePath":"diary/2025-05/2025-05-24.md","title":"2025年05月24日(土)","links":["推し活","okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention","iced","wgpu"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:30起床6:30朝食6:50天気痛false\n推しの誕生日だ\n推し活\n5月24日\n― それは莉犬くんの誕生日。HAPPY BIRTHDAY!!\n今日の作業\n地震アプリ、Slintにしたほうがいい？\nOGSP Disaster Preventionなんですが、とりまVelloで描いてるんですけども、Strokeが大量すぎると真っ黒になるんよ\n任意のタイミングでGPUにタスクを流せたら良いんですけど、XilemのAPIの制約上それは無理らしい。じゃあSlint使うべきかな\niced使おう！wgpuの恩恵を真に受けよう！キャッシュしてそのまま渡そう！あああああ"},"diary/2025-05/2025-05-26":{"slug":"diary/2025-05/2025-05-26","filePath":"diary/2025-05/2025-05-26.md","title":"2025年05月26日(月)","links":["okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention"],"tags":[],"content":"今日の体調\nはーばりねむい\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝24:20起床6:30朝食6:50天気痛false\n今日の作業\nミラー図法 重すぎ\nOGSP Disaster Prevention\ny = R\\times\\frac{5}{4}asinh(tan(\\frac{4}{5}\\phi))\nNaNに到達してフリーズしてる可能性のほうが高いんだけども"},"diary/2025-05/2025-05-27":{"slug":"diary/2025-05/2025-05-27","filePath":"diary/2025-05/2025-05-27.md","title":"2025年05月27日(火)","links":["diary/2025-05/2025-05-26"],"tags":[],"content":"今日の体調\n左腕の成長痛がああ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:20起床6:30朝食6:50天気痛false\n今日の作業\nミラー図法は重くないぞ\nミラー図法 重すぎ って言いましたが、別にそんな事なかったです。\nasinをatanにしてたのが間違いでした。"},"diary/2025-05/2025-05-28":{"slug":"diary/2025-05/2025-05-28","filePath":"diary/2025-05/2025-05-28.md","title":"2025年05月28日(水)","links":["okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention"],"tags":[],"content":"今日の体調\n成長痛：左足\n最近成長痛多い、大丈夫かな\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:30朝食6:50天気痛false\n今日の作業\nマップ作る\nOGSP Disaster Preventionで、マップを作りました。ズーム処理に此処まで手こずるのかよ、って感じですが。\nlet scale_factor = 20.0f64.powf(scale_delta);  \nif scale_factor != 0.0 {  \n    // スクロール位置を中心に拡大縮小  \n    let mouse_pos = ctx.local_position(state.position);  \n    let affine_before = self.transform.affine_no_flip(ctx.size());  \n    let before_pos = affine_before.inverse() * mouse_pos;  \n  \n    self.transform.scale *= scale_factor;  \n  \n    let affine_after = self.transform.affine_no_flip(ctx.size());  \n    let after_pos = affine_after.inverse() * mouse_pos;  \n    self.transform.translate -= before_pos.to_vec2() - after_pos.to_vec2();  \n    ctx.request_render();  \n}\nまあこんな感じ？inverse()(逆アフィン)っていうのは、xからyを求めるものをyからxを求めるようにしたもの、という感じです。"},"diary/2025-05/2025-05-29":{"slug":"diary/2025-05/2025-05-29","filePath":"diary/2025-05/2025-05-29.md","title":"2025年05月29日(木)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝23:00起床6:45朝食7:00天気痛true\n今日の作業\n何も捗らなかった"},"diary/2025-05/2025-05-30":{"slug":"diary/2025-05/2025-05-30","filePath":"diary/2025-05/2025-05-30.md","title":"2025年05月30日(金)","links":["okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\n今日の作業\nそろそろ…\n動画編集ソフトを作り始めないといけません。私のことを待つ40人の登録者のために…。\n軽量化\n軽量化しました。OGSP Disaster Preventionの話ですが、簡略化を使えるようにしたってだけです。あと色々マージしました。"},"diary/2025-05/2025-05-31":{"slug":"diary/2025-05/2025-05-31","filePath":"diary/2025-05/2025-05-31.md","title":"2025年05月31日(Sat)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\nCamping\nDue to the setting of GNOME and fcitx, we couldn’t to enable Mozc (Japanese Input Method). So we cannnot write with Japanese except the part of template in this diary.\nI’m going to camping now, and we’ll fixing the issue after I am home."},"diary/2025-05/2025-05":{"slug":"diary/2025-05/2025-05","filePath":"diary/2025-05/2025-05.md","title":"2025年5月","links":["diary/2025-05/2025-05-31","diary/2025-05/2025-05-30","diary/2025-05/2025-05-29","diary/2025-05/2025-05-28","diary/2025-05/2025-05-27","diary/2025-05/2025-05-26","diary/2025-05/2025-05-24","diary/2025-05/2025-05-23","diary/2025-05/2025-05-21","diary/2025-05/2025-05-20","diary/2025-05/2025-05-19","diary/2025-05/2025-05-18","diary/2025-05/2025-05-17","diary/2025-05/2025-05-16","diary/2025-05/2025-05-15","diary/2025-05/2025-05-14","diary/2025-05/2025-05-13","diary/2025-05/2025-05-12","diary/2025-05/2025-05-11","diary/2025-05/2025-05-10","diary/2025-05/2025-05-09","diary/2025-05/2025-05-08","diary/2025-05/2025-05-07","diary/2025-05/2025-05-06","diary/2025-05/2025-05-04","diary/2025-05/2025-05-03","diary/2025-05/2025-05-02","diary/2025-05/2025-05-01"],"tags":[],"content":"日記\n\n2025-05-31\n2025-05-30\n2025-05-29\n2025-05-28\n2025-05-27\n2025-05-26\n2025-05-24\n2025-05-23\n2025-05-21\n2025-05-20\n2025-05-19\n2025-05-18\n2025-05-17\n2025-05-16\n2025-05-15\n2025-05-14\n2025-05-13\n2025-05-12\n2025-05-11\n2025-05-10\n2025-05-09\n2025-05-08\n2025-05-07\n2025-05-06\n2025-05-05はありません。\n2025-05-04\n2025-05-03\n2025-05-02\n2025-05-01\n"},"diary/2025-05/index":{"slug":"diary/2025-05/index","filePath":"diary/2025-05/_index.md","title":"2025年5月","links":[],"tags":[],"content":""},"diary/2025-06/2025-06-01":{"slug":"diary/2025-06/2025-06-01","filePath":"diary/2025-06/2025-06-01.md","title":"2025年06月01日(日)","links":[],"tags":[],"content":"今日の体調\nキャンプやばすぎる\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝21:00起床5:30朝食6:50天気痛false\n今日の作業\nGitHub Projectsにて\n新・おかゆグループ地震計プロジェクトという名目でgithub.com/okayugroupにプロジェクトを立ち上げました。あとはそこにIssuesなどを並べています。\n使いこなせる気がしませんw💦"},"diary/2025-06/2025-06-02":{"slug":"diary/2025-06/2025-06-02","filePath":"diary/2025-06/2025-06-02.md","title":"2025年06月02日(月)","links":["歴史"],"tags":[],"content":"今日の体調\n５時頃めっちゃ頭いたかったなー\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調割と元気就寝23:30起床6:10朝食6:50天気痛true\n今日の作業\nそろそろ勉強しないと\nテストが迫ってきています。このままだと歴史が死んじゃいます。どうしましょうどうしましょう。\nということで、テスト勉強に専念しますね。\n開発はちょっとペース落とします。"},"diary/2025-06/2025-06-05":{"slug":"diary/2025-06/2025-06-05","filePath":"diary/2025-06/2025-06-05.md","title":"2025年06月05日(木)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:30起床6:20朝食6:50天気痛false\n今日の作業\n勉強しよう！\n毎日勉強するよ〜\n今日は弥生時代です。\nokayugroup.netをぶち壊してしまいました\nXServerで契約しているokayugroup.net（現在利用不可）のTLSをはじめサイト全体がアクセス不可能となりました。SSLの取得ができないので一旦サイトの設定をリセットしたら、今度アクセスができなくなりました。データは残っているので、今後Cloudflare Pagesに設置して静的に管理しようと思います…\n浮いたお金をVultrに投資…とか！"},"diary/2025-06/2025-06-06":{"slug":"diary/2025-06/2025-06-06","filePath":"diary/2025-06/2025-06-06.md","title":"2025年06月06日(金)","links":["wgpu"],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\nゲーム買ったよ\nADOFAIことA Dance of Fire and Iceという高難易度リズムゲームです。600円ほどで買えるので、楽しそうだし買ってみたって感じです。\n思ったより難しかった。\n今日の作業\n空織 - 動画編集ソフト\nさて、まずはwgpuでオフスクリーンレンダリングするところから始めましょう。\nこれは実装がすぐにできました（ありがとうAI）。"},"diary/2025-06/2025-06-13":{"slug":"diary/2025-06/2025-06-13","filePath":"diary/2025-06/2025-06-13.md","title":"2025年06月13日(金)","links":[],"tags":[],"content":"今日の体調\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n体調元気就寝22:00起床6:30朝食6:50天気痛false\n近況報告\n修学旅行に行ってました\n6/8から6/10にかけて、修学旅行に行ってました！\nこれ乗り越えたら、もう受験ですよ。いやですねぇ。\nおかゆグループのWebサイトを整理しまくった\n全部静的にして、Cloudflare Pagesで管理します。やっぱりCloudflareのネットワークは太っ腹ですね、おかゆグループのサイトさえCDNみたいにしてくれるんですよ。\n表示速度は多分GitHub Pagesよりも速いと思います。VitePress, Hugo, Quartzを試しているところです。"},"diary/2025-06/2025-06-16":{"slug":"diary/2025-06/2025-06-16","filePath":"diary/2025-06/2025-06-16.md","title":"2025年06月16日(月)","links":[],"tags":[],"content":"顎関節症になった\n言ってなかったんですけど、俺、不正咬合なんですよ。だからなんかいつの間にか顎関節症を発症してました！あははは\n最悪や、病院行くわ\n明日病院いってきます。治ると良いなー。\nLeptosええやん\nRustってサーバーサイドレンダリングもできるんですって。Node.jsより速いからこれはﾍﾞﾘｸﾞｯ\nあとね、俺Rust大好きになっちゃったからさ、自分にとっては多分RoRよりも開発体験良いと思うんです。Leptosならホットリロードもできるので！ね！"},"diary/2025-06/2025-06":{"slug":"diary/2025-06/2025-06","filePath":"diary/2025-06/2025-06.md","title":"2025年6月","links":["diary/2025-06/2025-06-01","diary/2025-06/2025-06-02","diary/2025-06/2025-06-05","diary/2025-06/2025-06-06","diary/2025-06/2025-06-13","diary/2025-06/2025-06-16"],"tags":[],"content":"目次\n\n2025-06-01\n2025-06-02\n2025-06-05\n2025-06-06\n2025-06-13\n2025-06-16\n"},"diary/2025-06/index":{"slug":"diary/2025-06/index","filePath":"diary/2025-06/_index.md","title":"2025年6月","links":[],"tags":[],"content":""},"diary/index":{"slug":"diary/index","filePath":"diary/_index.md","title":"日記","links":[],"tags":[],"content":""},"diary/日記":{"slug":"diary/日記","filePath":"diary/日記.md","title":"日記","links":["私について","diary/2025-04/2025-04","diary/2025-05/2025-05"],"tags":["MOC"],"content":"管理について\n2025/4/1からyossy4411が毎日書いています。\n殆どが今日の作業、あとは今日の体調を書いてます。\n(*´･∀･)o[ゆっくりしていってね]o(･∀･`*)\n目次\n2025年\n\n4月\n5月\n"},"favorite/STPR/STPR":{"slug":"favorite/STPR/STPR","filePath":"favorite/STPR/STPR.md","title":"STPR","links":[],"tags":[],"content":"企業\n株式会社STPRはすとぷりのリーダー、ななもり。（本名 柏原真人）が設立した株式会社である。\n渋谷ヒカリエに本社オフィスを備え、またシンガポールにもオフィスを持つ。\n事業内容\n\nクリエイタープロデュース\nコンテンツプロデュース\nクリエイティブプロデュース\nプロダクトプロデュース\n\n事務所\n所属クリエイター (29人 + STPR BOYS)\n\nすとぷり\n\n莉犬くん\nさとみ\nころん\nるぅと\nジェル\nななもり。\n\n\n騎士A\n\nばぁう\nしゆん\nてるとくん\nまひとくん。\nそうま\n\n\nAMPTAKxCOLORS（アンプタックカラーズ）\n\nあっきぃ\nまぜ太\nぷりっつ\nちぐさくん\nあっと\nけちゃ\n\n\nMeteorites（めておら）\n\n心音（しおん）\nLapis\nみかさくん\nロゼ\n明雷らいと（あかるいらいと）\nメルト・ダ・テンシ\n\n\nSneakerStep（すにすて）\n\nおさでい\nだいきり\nにしき\nゆたくん\nたちばな\nらお\nやなと\n\n\n"},"favorite/STPR/index":{"slug":"favorite/STPR/index","filePath":"favorite/STPR/_index.md","title":"STPR","links":[],"tags":[],"content":""},"favorite/STPR/すとふぇす詐欺垢":{"slug":"favorite/STPR/すとふぇす詐欺垢","filePath":"favorite/STPR/すとふぇす詐欺垢.md","title":"怪しいXアカウントの調査結果","links":["STPR"],"tags":["調査","危険","自己啓発","STPR"],"content":"XでSTPR Family Festivalの詐欺を行うアカウントを見つけたので調査報告。\n結論：調査結果\n\nメアドの入力の時点では特に何も起こらないが、今後そのメアドが悪用される可能性あり\nカード番号を入れて確定しても向かう先はライブ配信ではない\n入力したカードへ請求が来る（具体的にはわからないが10円以上）\n同じ手口で別のライブのリスナーや視聴者を騙している\n\n⚠️よって危険！！⚠️\n対処法 - 入力しちゃったならすぐやって\n\nカードの利用停止・再発行\n使用したメールの関連アカウントのパスワード変更\n迷惑メールの強化\n\n入力してなくても気をつけてね！！\nこういう事例、よくあるみたい…\n良い年した大人が子供だましとか良くないよね本当😤\nあと対象のアカウントは報告しといてね"},"favorite/index":{"slug":"favorite/index","filePath":"favorite/_index.md","title":"推し活","links":[],"tags":[],"content":"俺の推しについて語る場所！\nちなみに🍓👑❤️🐶寄りの箱推し"},"favorite/crossdress/index":{"slug":"favorite/crossdress/index","filePath":"favorite/crossdress/_index.md","title":"女装","links":[],"tags":[],"content":""},"favorite/推し活":{"slug":"favorite/推し活","filePath":"favorite/推し活.md","title":"推し活系","links":["STPR","favorite/おかゆのサブ","favorite/crossdress/女装"],"tags":["MOC"],"content":"推しという文化について\n推しという言葉を簡単に説明すると、「自分の大好きな人やもの」！\n「え？人だけじゃないの？？」と思う人も時々居るけど、最近ではアニメキャラや食べ物、動物、場所…など多数のものが「推し」と呼ばれてる。\n自分が好きならどんなものでも“推し”と呼んで良いんだよ〜！\nそして推し活は、「推しを応援する活動」のこと！\n例えば…\n\nグッズを集める！ - 推しのグッズ（CDやDVD、写真集、ぬいぐるみ、アクリルスタンド、キーホルダーなど）を集めたり、それを飾ったりする！\nイベント参加！ - 推しのライブやファンミーティング、握手会など、推しに会えるイベントに参加する！ 食べ物だったら期間限定メニューを食べるとかもあるよ！\nSNSを追う！ - 身近に推しと触れ合える場所がSNS！推しの情報を拡散したり、同じファンで話したり、ファンアートを描いてみたり、推しに返信してみたりする！\n布教する！ - 友達や家族、知り合いに推しの魅力を語る！SNSを使って情報発信したりもすることがあるよ！自分と同じ推しの仲間で集まったら楽しいよね！\n聖地巡礼！ - 推しが言った場所や作品の舞台になった場所に実際に足を運んでみる！推しと同じ景色を見ると嬉しい気持ちになるよね！\n\nなぜ推し活をするのか\n\n癒やしと元気をもらう\n普段の辛い気持ちやストレスも、推しが頑張っているのを見ると元気がもらえるんだよね。\n推しを応援することが、ストレス解消につながるんだ。\n仲間をつくる\n推しの仲間とつながると、同じ話題で盛り上がれるし、友達がたくさんできる！\n毎日が楽しくなる\n推しのことを考えるとワクワクしてくる。推しのために今日も頑張るぞ！という気持ちで日々に挑めるようになって、毎日がより楽しく感じられる！\n\nたまに推しを悪く言う人もいるけど、推しはその人たちの日々の頑張りの動力源になっているから、あまりそういうことはしないで欲しいな。下手したら生きるのが嫌になってくる、なんてことも…😱\n何かに没頭できるというのは素晴らしいこと！\n私の推し\n莉犬くん。\nかわいい。\n声が好き。\n莉犬くんもだけどその事務所のSTPRも推してる。\nサブセクション\n\nおかゆのサブ - 推し活用チャンネル\n女装 (!?)\n"},"okayugroup/OGSP/OGSP":{"slug":"okayugroup/OGSP/OGSP","filePath":"okayugroup/OGSP/OGSP.md","title":"おかゆグループ地震計プロジェクト","links":["おかゆグループ","develop/Knowledge/lang/programming/Rust/Rust","okayugroup/OGSP/sensor/seismometer/OGSP-Seismometer","okayugroup/OGSP/server/OGSP-Server-Node","okayugroup/OGSP/previous/EarthQuake/EarthQuake.desktop","okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention","okayugroup/OGSP/なぜオープンソースなのか"],"tags":["MOC"],"content":"概要\nおかゆグループ地震計プロジェクト（英: Okayu Group Seismometer Project、略: OGSP）は、オープンソースで地震観測網および災害対策網を構築するプロジェクト。\n主導はおかゆグループであるが、基本的にWeb3の考えを取り入れており、分散化を目標としている。すべてのプログラムがGitHub上に公開される、オープンソースプロジェクトである1。\n地震計開発\n地震計は、加速度データから震度を計算し、データをサーバーに送信する。\n現在ではESP32マイコンを使い、開発を進めています。\n言語: Rust\n↪ OGSP Seismometer\nまた、スマホに内蔵される加速度センサを使って、スマホを地震計にすることで新しく地震計を作製することなく地震観測が可能になるプロジェクト。\nサーバー開発\n地震計から収集したデータを集める場所。\n同時に受信デバイスへのデータ配信と気象庁などの機関からのデータ収集も行う。\n↪ OGSP Server Node\n受信システム・アプリ開発\nEarthQuake - デスクトップ版地震災害情報アプリ\nパフォーマンスの理由で開発停止\n言語: C#\nGUIフレームワーク: Avalonia + SkiaSharp\n↪ GitHub\nOGSP Disaster Prevention\nパフォーマンスを最大化した最新鋭の設計\n言語: Rust\nGUIフレームワーク: vello + xilem\nFootnotes\n\n\n詳しくはなぜオープンソースなのかを参照。 ↩\n\n\n"},"okayugroup/OGSP/index":{"slug":"okayugroup/OGSP/index","filePath":"okayugroup/OGSP/_index.md","title":"OGSP","links":[],"tags":[],"content":""},"okayugroup/OGSP/application/index":{"slug":"okayugroup/OGSP/application/index","filePath":"okayugroup/OGSP/application/_index.md","title":"アプリ","links":[],"tags":[],"content":""},"okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention":{"slug":"okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention","filePath":"okayugroup/OGSP/application/disaster-prevention/OGSP Disaster Prevention.md","title":"OGSP Disaster Prevention","links":["OGSP","okayugroup/OGSP/network/OGSP-Disaster-Network","develop/Knowledge/lang/programming/Rust/Rust","okayugroup/OGSP/previous/EarthQuake/EarthQuake.desktop","develop/Knowledge/lang/programming/ガベージコレクション","私について","wgpu"],"tags":[],"content":"OGSP Disaster Prevention、またはOGSP防災は、OGSPや気象庁から提供される防災情報を表示するためのデスクトップ (およびモバイル) アプリケーションである。\nまた、このアプリケーションはOGSP Disaster Networkのアプリケーション層を担う役割があり、地震計から取得したデータをレンダリングする機能を備える。\n特徴\nOGSP Disaster Preventionの最大の特徴は、Rustのメモリ安全性と並列性を活用した、軽量で高速な動作だ。\nOGSP Disaster Preventionは、C#で構成されるEarthQuakeの次期プロジェクトである。前任では、機能を盛りすぎたために、フレームレート的にもバイナリサイズ的にも重くなってしまった。\nランタイムの重さはほとんどがGCに由来するもので、開発者であるyossy4411はRustがこれを解消するカギだと考えた。\n実際、GCを搭載しないRustは、C#よりも高速で、省リソースで動作することが多い。\n開発\n環境\n\nIDE: RustRover\nプラットフォーム: GitHub\n\n依存関係\n\nwgpu\nVello\nXilem\n"},"okayugroup/OGSP/application/disaster-prevention/index":{"slug":"okayugroup/OGSP/application/disaster-prevention/index","filePath":"okayugroup/OGSP/application/disaster-prevention/_index.md","title":"OGSP防災アプリ","links":[],"tags":[],"content":""},"okayugroup/OGSP/design.excalidraw":{"slug":"okayugroup/OGSP/design.excalidraw","filePath":"okayugroup/OGSP/design.excalidraw.md","title":"design.excalidraw","links":[],"tags":["excalidraw"],"content":"⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠ You can decompress Drawing data with the command palette: ‘Decompress current Excalidraw file’. For more info check in plugin settings under ‘Saving’\nExcalidraw Data\nText Elements\nサーバー層 \nレシーバ層 \nアプリケーション群 \nOGSP Disaster Prevention \nEarthQuake (旧) \nOGSP Disaster Network \nUDP \nQUIC, HTTP/3 \nWeb3 \n開発停止 \nセンサー層 \nApp \n地震計 \nアメダス\n(開発予定) "},"okayugroup/OGSP/network/OGSP-Disaster-Network":{"slug":"okayugroup/OGSP/network/OGSP-Disaster-Network","filePath":"okayugroup/OGSP/network/OGSP Disaster Network.md","title":"OGSP Disaster Network","links":["おかゆグループ","OGSP","develop/Knowledge/internet/application/http/HTTP"],"tags":[],"content":"OGSP Disaster Network (おかゆグループ地震計プロジェクト災害ネットワーク) は、おかゆグループが現在開発中のOGSPのWeb3ネットワークの一つであり、地震波データを始めとした様々な災害関連情報の共有に使用される。\n概要\nOGSP Disaster Networkでは、大きく分けてサーバー層、センサー層、レシーバ層の3つのレイヤーがある。サーバーを介して相互に通信が可能であり、これらすべてのレイヤーがWeb3のノードとして機能する。\nこれらのレイヤーは、次のイラストのように結びついている。\n\nセンサーとサーバー間は速度を最優先としており、UDPで投げるだけである。このため、安全性は担保されない。あくまで「送信するためのデバイス」として捉えるのが正しい。\nだがここには、トークンの認証などでセキュリティ上のリスクがあると言える。\nサーバー層とレシーバ層では主に3を使用し、完全な暗号化を使用できる。\n機能\nOGSP Disaster Networkでは以下の機能が利用できる。\n\n災害情報の収集\nデータ分析と実測値の発表\nデータのAPI提供\n\nこれによって、OGSPのセンサー群から取得できるデータをアプリケーション上に表示したり、そのデータを研究利用したりすることができる。\n特徴\nこのネットワークにはいくつか大きな特徴がある。\n分散型ネットワークの実装\nWeb3の考え方を反映して、このネットワークでは防災の司令トップを作っていない。\nこれには、2つの理由がある。\n\n柔軟性の確保\nネットワーク上にトップを作らないことで、ネットワークを独自に実装したりサーバーを自由に改変したり、そういったものに柔軟に対応できるようになる。\n自助・共助の促成\n災害発生時には、「自助」「共助」「公助」の3つの助けがあるが、このうち「公助」は国によるもののため大規模災害時には行き届かない場合がある。こういった場合に、コミュニティ内のデータを活かして自助・共助を促成するためである。\n\nこれにより、以前より柔軟で地域に寄り添った防災環境の構築が可能になると考えている。\n冗長性の確保\n分散型にすることは、つまりサーバー（ノード）を複数用意することでもある。これによって、ネットワークの冗長性も同時に確保できる。\n冗長性というのは、例えばどれかのサーバーがダウンした場合でも、ネットワーク全体が崩壊せず動作し続けられるということである。このネットワークでは、トップを決定せずに柔軟に役割を変えられるように設計されているため、すべてのノードがダウンしない限りは動作し続けられるはずだ。\n冗長化はこのような災害ネットワークで非常に重要である。災害発生時には以下のリスクが伴う。\n\nサーバーの停止\n\n停電\n安全装置の作動\n火災\n物理的な遮断\nコンピューターの破損\n\n\nネットワークの混雑\n\n災害掲示板の設立\nニュース、災害サイトへのアクセス集中\n電話\n\n\n\n冗長化することで、ネットワーク全体がCDNのような役割をし、リクエストを最適な場所に分散できる。分散することでわざわざ遠いサーバーにアクセスすることを減らし、滞納を最小限にする。"},"okayugroup/OGSP/network/index":{"slug":"okayugroup/OGSP/network/index","filePath":"okayugroup/OGSP/network/_index.md","title":"OGSP Disaster Network","links":[],"tags":[],"content":""},"okayugroup/OGSP/previous/EarthQuake/EarthQuake.desktop":{"slug":"okayugroup/OGSP/previous/EarthQuake/EarthQuake.desktop","filePath":"okayugroup/OGSP/previous/EarthQuake/EarthQuake.desktop.md","title":"EarthQuake - デスクトップ版地震災害情報アプリ","links":[],"tags":["MOC"],"content":"\n\n                  \n                  IMPORTANT\n                  \n                \n\n\nパフォーマンス上の理由から、このアプリの開発は中断されました。\n次期となるOGSP Disaster Preventionの開発にご期待ください。\n\n\n\n特徴\n\nAvaloniaで書かれたクロスプラットフォームなアプリ (Windows, Mac, Linux)\nPMTilesを使用したベクターマップの表示 （独自実装）\n地震情報・震央分布図の表示\n\nリリース\n正式なリリースはGitHubに、プレリリースバージョンはおかゆグループ  アーカイブにて公開されています。\nとても分かりづらいですが、画像にするならこんな感じ。\n\nバージョン履歴\n\nv0.1.1 - 2024年12月22日\nマップにPMTilesを使用、バグ修正\nv0.1.0 - 2024年9月23日\n最初のリリース\npre-20240722 - 2024年7月22日\npre-20240528 - 2024年5月28日\n"},"okayugroup/OGSP/previous/EarthQuake/index":{"slug":"okayugroup/OGSP/previous/EarthQuake/index","filePath":"okayugroup/OGSP/previous/EarthQuake/_index.md","title":"EarthQuake","links":[],"tags":[],"content":""},"okayugroup/OGSP/previous/index":{"slug":"okayugroup/OGSP/previous/index","filePath":"okayugroup/OGSP/previous/_index.md","title":"過去のプロジェクト","links":[],"tags":[],"content":""},"okayugroup/OGSP/sensor/index":{"slug":"okayugroup/OGSP/sensor/index","filePath":"okayugroup/OGSP/sensor/_index.md","title":"観測系システム","links":[],"tags":[],"content":""},"okayugroup/OGSP/sensor/seismometer/index":{"slug":"okayugroup/OGSP/sensor/seismometer/index","filePath":"okayugroup/OGSP/sensor/seismometer/_index.md","title":"地震計","links":[],"tags":[],"content":""},"okayugroup/OGSP/server/OGSP-Server-Node":{"slug":"okayugroup/OGSP/server/OGSP-Server-Node","filePath":"okayugroup/OGSP/server/OGSP Server Node.md","title":"おかゆグループ地震計プロジェクト サーバーノード","links":["okayugroup/OGSP/network/OGSP-Disaster-Network","develop/Knowledge/internet/application/http/HTTP3","develop/Knowledge/internet/transport/quic/QUIC","おかゆグループ"],"tags":[],"content":"OGSP Server Node (おかゆグループ地震計プロジェクト サーバーノード)は、OGSP Disaster Networkにおけるサーバー層のノードを提供するプログラムの総称である。\nコードはオープンソースで公開されており、自由に改変できる。\nなお、このうち公式のプログラムはOGSP Server Official Nodeと呼ぶ。\n概要\nこのアプリケーション内では、以下の処理を行うことを目標とする。\n\nセンサーノードからデータの収集\n収集したデータの整理\nデータのブロックチェーンへの書き込みと他ノードへの共有\nAIなどでデータを処理と警報などの発表\nAPIハンドリング\n\n\n\n                  \n                  NOTE\n                  \n                \n\n\nP2Pなどの部分は実装予備段階です。これにはコンピューターが複数台必要であるため、その予算が確保できていないことが主な理由です。\n\n\n\n設計\n1. データ収集\nOGSP Server Nodeは、OGSP Disaster Networkにおけるセンサー層からデータを収集する役割を担っており、このセンサーとはUDPで通信を行う。なお、導入の壁を減らすためにポート開放はサーバー側でのみ行い、センサー側のポート開放は必要ない。\nただし、UDPのみでなおかつポート開放をしない環境では、サーバーがセンサーに通信を行うことはできないため、ここではIPv6のエニーキャストなどの技術を使用して対応する。\n2. ネットワークコンピューティングを使用した高度な計算\nOGSP Server NodeはWeb3の実現のためにサーバー同士でP2Pを構築する。このP2Pを用いることで、高度な計算を分担して超並列計算を行うことができる。\nこの特性を利用して、AIの推論をより高速に完了したり、より精度の高い震源特定などの計算を実行したりできる。\n3. ブロックチェーンでの信頼性の確保\nセンサーから収集したデータとデータの計算処理の結果は、ブロックチェーンに書き込まれ、定期的にP2Pで\n4. APIハンドリング\nOGSP Server Nodeは”偏らないデータを簡単に取得できること”を目標とするため、データを取得するための方法としてAPIを提供する。\nここには最新技術を取り入れ、3およびQUICプロトコルを用いて高速かつ安全な通信を保証する。\n注1: コードの改変について\nOGSP Server Nodeのコードはオープンソースであり、GitHubで公開されている。これは自由に改変して公開することのできるMITライセンスなどを実装するつもりであるが、ここで問題がある。\n悪意のある変更を含むサーバーノードがネットワークに参加することもできてしまうため、これが秩序を壊したりウイルスを仕込む可能性があるということだ。\nこれはプログラムの中に署名を組み、公式のホワイトリストに含まれる公開鍵で認証 (Ed25519など) を行うことで対応できる。\n問題点\n気象業務法と予報許可\nこのプロジェクトの開発拠点とターゲットは日本であるため、勿論日本の法律に従ったうえで進める必要がある。ここで問題となるのが、気象業務法だ。\n気象業務法 第十七条 では以下のように定められている。\n\n第十七条\n気象庁以外の者が気象、地象、津波、高潮、波浪又は洪水の予報の業務（以下「予報業務」という。）を行おうとする場合は、気象庁長官の許可を受けなければならない。\n２ 前項の許可（以下この章において「許可」という。）は、予報業務の目的及び範囲（土砂崩れ（崖崩れ、土石流及び地滑りをいう。以下同じ。）、高潮、波浪又は洪水の予報の業務（以下「気象関連現象予報業務」という。）をその範囲に含む予報業務の許可にあつては、当該気象関連現象予報業務のための気象の予想を行うか否かの別を含む。第十九条第一項及び第四十六条第三号において同じ。）を定めて行う。\n３ 噴火、火山ガスの放出、土砂崩れ、津波、高潮又は洪水の予報の業務（以下「特定予報業務」という。）をその範囲に含む予報業務の許可については、当該特定予報業務に係る予報業務の目的は、第十九条の三の規定による説明を受けた者にのみ利用させるものに限られるものとする。\n\nこれに基くと、\n\n予報業務を行おうとする場合は、気象庁長官の許可を受けなければならない。\n\nという部分で問題が発生することが分かるだろう。\nまず、予報業務許可というものは存在する。気象庁に連絡して審査を受ければよい。\nだがしかし、予報業務許可というものは特定の個人や機関に対して下りるものである。\nこのようなWeb3ネットワークは、１つの個人や団体が管理するものではなく、参加者全員が所有するもの、と考えるべきである。というのも、Web3は責任や管理の権限を分散するという思想に基づいているためである。\n例えば「おかゆグループ」に対して予報業務許可が下りた場合でも、おかゆグループが直轄しないサーバーを管理する個人や団体はそれを持っていないため、サーバーの中の予報サービス系の処理は、おかゆグループによるサーバーが独占することとなる。\nこれはWeb3の思想に反する。\nこれに対応するためには、最も手っ取り早い方法としては予報業務をしないことである。代わりに、地震計の加速度を直接配信するなどの方法を使う。\nまた、気象庁に特別に許可を貰うことも方法としては考えられるが、それはハードルが高すぎるのでまだ挑戦はしない。\n開発\n開発環境\nOGSP Server Official Nodeの開発環境は以下のとおりである。\n\nGo\ngo-libp2p - libp2pの公式Go実装\nquic-go - QUICと3のGo実装\necho - 高パフォーマンスのGoサーバーフレームワーク\nNix - 環境ツール\n\nGitHub Repository\n公式のものは、GitHub - okayugroup/ogsp-server-nodeである。（現時点では非公開）\nまた、このリポジトリをフォークして独自のサーバーノードを作成することも許可する（非公開なためまだ不可能ではあるが）。\nContribution\nまた、IssueやPRを開いて開発に貢献 (Contribute) することもできる。\nこの辺りのプロジェクトの整理は、用意ができ次第ナレッジベースツールで公開する予定。"},"okayugroup/OGSP/server/index":{"slug":"okayugroup/OGSP/server/index","filePath":"okayugroup/OGSP/server/_index.md","title":"OGSP Server Node","links":[],"tags":[],"content":""},"okayugroup/OGSP/なぜオープンソースなのか":{"slug":"okayugroup/OGSP/なぜオープンソースなのか","filePath":"okayugroup/OGSP/なぜオープンソースなのか.md","title":"OGSP - オープンソースの理由","links":["私について"],"tags":[],"content":"私は防災はみんなでつくるものであるべきであって、他人や政府に頼りっきりになるべきではないと思っております。（自助・共助・公助）\nそのためのカギとなる考え方がオープンソースなのです。\nオープンソースは、ソフトウェアのコードやリソースを公開された場所に置くことで使用や改変、共同開発ができる開発の方法です。\n\n\n                  \n                  INFO\n                  \n                \n\n\nオープンソースという言葉が指すものは、考え方だったり開発モデルだったりする。ややこしくてごめんね\n\n\n\nメリット\nオープンソースにすることで、政府組織外で運営されることによって発生する様々な問題の解消が可能になります。\n\n透明性の向上\n柔軟性の向上\n互換性の向上\nバグの削減\n責任の分散\n災害への意識の向上\n\nデメリット\nオープンソースになることによって発生するデメリットもあります。\n\n収入源が得られない （開発資金の調達が難しい）\nハッキングの対象になりやすい （逆に修正もしやすいが）\n開発スピードの低下 （公開することで他人からも見やすくする必要があるため）\n"},"okayugroup/index":{"slug":"okayugroup/index","filePath":"okayugroup/_index.md","title":"おかゆグループ","links":[],"tags":[],"content":"おかゆグループは、『学生だからできること』をモットーに活動する、同好会のようなものです。\n私によって創設・管理されていますが、成長させるのは”みんな”です！\nメンバー２人しかいないから誰か来てくれ〜(´；ω；｀)"},"okayugroup/おかゆグループ":{"slug":"okayugroup/おかゆグループ","filePath":"okayugroup/おかゆグループ.md","title":"おかゆグループ","links":["私について"],"tags":["MOC"],"content":"概要\nおかゆグループは、『学生だからできること』をモットーに、現在はオープンソースソフトウェア開発を中心的に進めているグループ。\nいわば学生の同好会のようなもの。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFieldProperty創設者yossy4411管理者yossy4411設立2024年6月4日1業種ITおよびその他製品従業員数2人資本金0円売上高0円純利益-4500円2決算期3月31日収入源なし3\nメンバー募集について\n私達と一緒に活動しませんか？\n（圧倒的人員不足）\n条件\n\n学生であること\nやりたいという意思\n開発・コミュニケーションに使用できるパソコン（自分専用のものを推奨）\n\nFootnotes\n\n\n創設された日付が明確にデータとして残っていない。\nただし2024年3月頃には「おかゆコーポレーション」（仮名）という構想はできていた。\nおかゆグループの公式HPができたのが6月4日なのでこの日としている。 ↩\n\n\n2024年度、yossy4411がおかゆグループにかけた金額は4500円、売上高0円。\n赤字！wwww ↩\n\n\n寄付及び広告収入を視野に入れている。 ↩\n\n\n"},"other/index":{"slug":"other/index","filePath":"other/_index.md","title":"その他","links":[],"tags":[],"content":""},"other/politics/index":{"slug":"other/politics/index","filePath":"other/politics/_index.md","title":"政治関係","links":[],"tags":[],"content":"\n\n                  \n                  Info\n                  \n                \n\n\n何だよこれ\n\n\n\n触れづらいと思いますが…\n中学生として何かしら社会の役に立てそうかなと思いまして、このFieldを立てています。\nやっぱり見てみぬふりをするのは良くないですからね！"},"やることリスト（すべて）":{"slug":"やることリスト（すべて）","filePath":"やることリスト（すべて）.md","title":"TODOリスト（すべて）","links":["okayugroup/OGSP/application/disaster-prevention/OGSP-Disaster-Prevention","okayugroup/OGSP/previous/WebGPUのOGSP-DPへの利活用","OGSP","okayugroup/OGSP/previous/EarthQuake","develop/projects/JourneyStreetMap/JourneyStreetMap"],"tags":[],"content":"アイデア\n\n 地震計プロジェクトにWeb3を活用\n ボーカル除去AIを自作\n オープンソースな政治を目指そうの会\n 広告で稼ごう\n\n検討中\n\n OGSP Disaster Prevention\n 動画編集ソフトを自作\n プロジェクト管理を容易にしよう\n PMTiles.NETにWriteの処理を追加\n\n調査・視察中\n\n もりうさプロジェクト\n 地震観測\n\n勉強・学習中\n\n WebGPUのOGSP-DPへの利活用\n Vulkan\n Web3\n NFT\n\n修正が必要 ⏫\nやりたいこと\n進行中\n\n OGSP サーバー開発\n\n一時停止中\n\n YouTubeやれ\n\n完了（修正済み）\n完了\n完了（開発停止）\n完了\n\n EarthQuake.Desktop\n JourneyStreetMap ✅ 2025-04-28\n\n予定なし\n\nアーカイブ\n\n EarthQuake.Desktop\n EarthQuake.Desktop\n"},"ライセンス":{"slug":"ライセンス","filePath":"ライセンス.md","title":"ライセンスについて","links":["develop/Knowledge/知識置き場"],"tags":[],"content":"このノートのライセンスは、基本的に\n\nクリエイティブ・コモンズ 表示 4.0 国際 (CC BY 4.0)\nクリエイティブ・コモンズ 表示-継承 4.0 国際 (CC BY-SA 4.0)\nの２つです。\n\nライセンスの意味\nクリエイティブ・コモンズとは、著作物を正しく再利用できるようにすることを目的とした、様々なレベルのライセンスを定めているプロジェクト及び非営利団体の名称です。\nそのうち、表示 4.0 国際は１つのレベルです。ここでは以下のことが許可されています。\n\n共有（複製、再配布、商用利用を含む）\n翻案（リミックス、改変、マージを含む）\n\nただし、以下のことを守ってほしいです。\n\n表示\n\n適切なクレジット を表示し、ライセンスへのリンクを提供する。\n変更があったらその旨 を示す。\n\n\n\nこれらは合理的であればどのような方法でも構いませんが、許諾者があなたを支持するような表記は除きます。\nまた、表示-継承 4.0 国際は、上のものに守ってほしいことに以下の要項を追加したものです。\n\n継承\nこれは、私のコンテンツをリミックスしたり、改変したり、加工した場合には、同じライセンス、つまり表示-継承 4.0 国際で配布してください、ということです。\n\nライセンスが課される場所\n基本的な部分はCC BY 4.0で公開されますが、知識置き場ではWikipediaの情報を載せているのでCC BY-SA 4.0で公開しています。詳細についてはノートの内容についてをご覧ください。"},"私について":{"slug":"私について","filePath":"私について.md","title":"yossy4411に関する情報","links":[],"tags":[],"content":"GitHub\n(GitHubよりコピー)\n👋 こんにちは！\n私はプログラミングが大好きな中学生で、コードを書くことで新しい可能性を広げることを目指しています。\n2024年6月におかゆグループを設立し、現在メンバーが私を含め２人所属しています！\n\n💪 主なスキル\n\n💻 プログラミング言語: C#, Python, Rust, JavaScript, Go, PHP, C++ など\n🌐 フロントエンド: Avalonia, Flutter, Vue.js, iced(Rust) など\n📡 バックエンド: Go, .NET Core\n🖥️ 開発環境: JetBrains IDE, VSCode\n\n🌟 取り組んでいるプロジェクト\n\nOGSP: みんなでつくる防災プロジェクト\n歌い手ファンメイドページ: 好きを広げ、音楽をもっと楽しくするウェブサイト\n\n🧠 興味のある分野\n\nIoTデバイス開発\n3Dグラフィックスと地図描画\nオープンソース貢献\n\n\n📊 GitHub Stats\n\n💻 主な言語\n\n\n🔗 リンク\n\nGitHub - オープンソースの拠点\nQiita - 開発ブログ\nおかゆの日記 - 生活のブログ\nYouTube - 遊び場\n"}}